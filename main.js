!function(){"use strict";class e{constructor(e,t){this._settings=e,this._form=t}_showInputError(e,t){const o=this._form.querySelector(".".concat(e.id,"-error"));e.classList.add(this._settings.inputErrorClass),o.textContent=t,o.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._form.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._settings.inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)):(this._buttonElement.classList.remove(this._settings.inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._settings.inputSelector)),this._buttonElement=this._form.querySelector(this._settings.submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e),this._toggleButtonState()}))}enableValidation(){this._setEventListeners(this._form),this._form.addEventListener("submit",(function(e){e.preventDefault()}))}}function t(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}document.querySelector(".popup-photo");class o{constructor(e,o,s,r,n){let{_id:i,name:c,link:l,likes:a}=e;t(this,"_handleLikeEvent",(()=>{this._element.querySelector(".photo-card__like-button").classList.contains("photo-card__like-button_active")?this._handleLikeClick(!1):this._handleLikeClick(!0)})),t(this,"_handleDeleteEvent",(()=>{this._handleDeleteCardClick()})),this._id=i,this._name=c,this._image=l,this._likes=a,this._cardSelector=o,this._handleCardClick=s,this._handleDeleteCardClick=r,this._handleLikeClick=n}getId(){return this._id}createCard(){return this._element=this._createNewPhotoCardElement(),this._addEventListeners(),this._element}deleteCard(){this._element.remove(),this._element=null}updateLikes(e,t){this._likes=e;const o=this._element.querySelector(".photo-card__like-button");this._element.querySelector(".photo-card__like-count").textContent=this._likes.length,JSON.stringify(this._likes).includes(t)?o.classList.add("photo-card__like-button_active"):o.classList.remove("photo-card__like-button_active")}_addEventListeners(){const e=this._element.querySelector(".photo-card__like-button");this._addLikeEventListener(e);const t=this._element.querySelector(".photo-card__delete-button");this._addDeleteEventListener(t);const o=this._element.querySelector(".photo-card__photo");this._addOpenPhotoEventListener(o)}_createNewPhotoCardElement(){const e=this._cardSelector.querySelector(".photo-card").cloneNode(!0),t=e.querySelector(".photo-card__photo"),o=e.querySelector(".photo-card__title"),s=e.querySelector(".photo-card__like-count");return t.src=this._image,t.alt=this._name,o.textContent=this._name,s.textContent=this._likes.length,e}_addLikeEventListener(e){e.addEventListener("click",this._handleLikeEvent)}_addDeleteEventListener(e){e.addEventListener("click",this._handleDeleteEvent)}_addOpenPhotoEventListener(e){e.addEventListener("click",(()=>{this._handleCardClick()}))}}function s(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}class r{constructor(e){s(this,"_handleEscClose",(e=>{"Escape"==e.key&&this._popup.classList.contains("popup_opened")&&this.close()})),s(this,"_handleClickOnOverlayClose",(e=>{e.target.classList.contains("popup")&&this.close()})),this._popup=document.querySelector(e)}open(){this._popup.classList.add("popup_opened"),this.setEventListeners()}close(){this._popup.classList.remove("popup_opened"),this.removeEventListeners()}setEventListeners(){document.addEventListener("click",this._handleClickOnOverlayClose),document.addEventListener("keydown",this._handleEscClose),this._popup.querySelector(".popup__close-button").addEventListener("click",close)}removeEventListeners(){document.removeEventListener("click",this._handleClickOnOverlayClose),document.removeEventListener("keydown",this._handleEscClose),this._popup.querySelector(".popup__close-button").removeEventListener("click",close)}}class n extends r{constructor(e,t){var o,s;super(e),s=e=>{e.preventDefault(),this._handleSubmit(),this.close()},(o="_handleProfileFormSubmit")in this?Object.defineProperty(this,o,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[o]=s,this._handleSubmit=t,this._form=this._popup.querySelector(".form")}_getInputValues(){const e={};return Array.from(this._popup.querySelectorAll(".form__text-input")).forEach((t=>{e[t.getAttribute("name")]=t.value})),e}setEventListeners(){this._form.addEventListener("submit",this._handleProfileFormSubmit),super.setEventListeners()}removeEventListeners(){this._form.removeEventListener("submit",this._handleProfileFormSubmit),super.removeEventListeners()}close(){this._form.reset(),super.close()}}class i{constructor(e,t){let{items:o,renderer:s}=e;this._items=o,this._renderer=s,this._container=document.querySelector(t)}clear(){this._container.innerHTML=""}renderer(){this.clear(),this._items.forEach((e=>{this.addItem(this._renderer(e))}))}addItem(e){this._container.prepend(e)}}const c=document.querySelector(".popup-edit"),l=document.querySelector(".popup-add"),a=document.querySelector(".popup-photo"),d=document.querySelector(".popup-delete"),u=c.querySelector(".popup__close-button"),h=l.querySelector(".popup__close-button"),_=a.querySelector(".popup__close-button"),p=(d.querySelector(".popup__close-button"),c.querySelector(".form")),m=p.querySelector('.form__text-input[name="name"]'),f=p.querySelector('.form__text-input[name="about-me"]'),v=l.querySelector(".form"),E=v.querySelector('.form__text-input[name="title"]'),b=v.querySelector('.form__text-input[name="image-link"]'),y=(d.querySelector(".form"),document.querySelector(".profile")),k=y.querySelector(".profile__edit-button"),S=y.querySelector(".profile__add-button"),L=document.querySelector("#photo-card__template").content,g=new Map;let C;const q={formSelector:".form",inputSelector:".form__text-input",submitButtonSelector:".form__submit-button",inactiveButtonClass:"form__submit-button_disabled",inputErrorClass:"form__text-input-error_active",errorClass:"form__input-error_visible"};function j(e){const t=new o(e,L,I,P,w),s=t.createCard();return t.updateLikes(t._likes,x._id),s}function I(){B.open(this._image,this._name)}function P(){D.open(),C=this}function w(e){e?A.addLike(this.getId()).then((e=>{console.log("Like added succesfully",e.likes),this.updateLikes(e.likes,x._id)})):A.removeLike(this.getId()).then((e=>{console.log("Like removed succesfully",e.likes),this.updateLikes(e.likes,x._id)}))}const A=new class{constructor(e){this._options=e}getInitialCards(){return fetch(this._options.baseUrl+"/cards/",{headers:this._options.headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).then((e=>e)).catch((e=>Promise.reject("Error: ".concat(e.status)))).finally((()=>{console.log("All done")}))}setNewCard(e){let{cardName:t,cardLink:o}=e;return fetch(this._options.baseUrl+"/cards/",{method:"POST",headers:this._options.headers,body:JSON.stringify({name:t,link:o})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).then((e=>e)).catch((e=>Promise.reject("Error: ".concat(e.status)))).finally((()=>{console.log("All done")}))}addLike(e){return fetch(this._options.baseUrl+"/cards/likes/"+e,{method:"PUT",headers:this._options.headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).then((e=>e)).catch((e=>Promise.reject("Error: ".concat(e.status)))).finally((()=>{console.log("All done")}))}removeLike(e){return fetch(this._options.baseUrl+"/cards/likes/"+e,{method:"DELETE",headers:this._options.headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).then((e=>e)).catch((e=>Promise.reject("Error: ".concat(e.status)))).finally((()=>{console.log("All done")}))}deleteCard(e){return fetch(this._options.baseUrl+"/cards/"+e,{method:"DELETE",headers:this._options.headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status,", ").concat(e.body)))).then((e=>e)).catch((e=>Promise.reject("Error: ".concat(e.status,", ").concat(e.body)))).finally((()=>{console.log("All done")}))}getUserInfo(){return fetch(this._options.baseUrl+"/users/me",{headers:this._options.headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).then((e=>e)).catch((e=>Promise.reject("Error: ".concat(e.status)))).finally((()=>{console.log("All done")}))}setUserInfo(e){let{newName:t,newAbout:o}=e;return fetch(this._options.baseUrl+"/users/me",{method:"PATCH",headers:this._options.headers,body:JSON.stringify({name:t,about:o})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).then((e=>e)).catch((e=>Promise.reject("Error: ".concat(e.status)))).finally((()=>{console.log("All done")}))}updateAvatar(e){return fetch(this._options.baseUrl+"/users/me/avatar",{method:"PATCH",headers:this._options.headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).then((e=>e)).catch((e=>Promise.reject("Error: ".concat(e.status)))).finally((()=>{console.log("All done")}))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"b9d1c3b6-c0f4-4224-ad8f-4c81efa3f89d","Content-Type":"application/json"}}),x=new class{constructor(e){let{nameSelector:t,jobSelector:o}=e;this._nameSelector=t,this._jobSelector=o}getUserInfo(){return{name:document.querySelector(this._nameSelector).textContent,job:document.querySelector(this._jobSelector).textContent}}setUserInfo(e){let{name:t,about:o,_id:s}=e;const r=document.querySelector(this._nameSelector),n=document.querySelector(this._jobSelector);r.textContent=t,n.textContent=o,this._id=s}}({nameSelector:".profile__name",jobSelector:".profile__description"});let U;A.getUserInfo().then((e=>{x.setUserInfo(e)})),A.getInitialCards().then((e=>{U=new i({items:e,renderer:j},".photos__grid"),U.renderer()}));const O=new n(".popup-add",(function(){const e={cardName:E.value,cardLink:b.value};A.setNewCard(e).then((e=>{const t=new o(e,L,I,P,w);U.addItem(t.createCard()),t.updateLikes(t._likes,x._id)}))})),N=new n(".popup-edit",(function(){A.setUserInfo({newName:m.value,newAbout:f.value}).then((e=>{x.setUserInfo(e)}))})),D=new n(".popup-delete",(function(){A.deleteCard(C.getId()).then((()=>{console.log("Card deleted"),C.deleteCard(),C=null}))})),B=new class extends r{constructor(e){super(e)}open(e,t){const o=this._popup.querySelector(".popup-photo__container"),s=o.querySelector(".popup-photo__photo"),r=o.querySelector(".popup-photo__title");s.src=e,r.textContent=t,s.alt=t,super.open()}}(".popup-photo");Array.from(document.querySelectorAll(q.formSelector)).forEach((t=>{const o=t.getAttribute("name"),s=new e(q,t);s.enableValidation(),g.set(o,s)})),S.addEventListener("click",(()=>{O.open(),g.get("add-form").resetValidation()})),h.addEventListener("click",(()=>{O.close()})),k.addEventListener("click",(()=>{const e=x.getUserInfo();m.value=e.name,f.value=e.job,N.open(),g.get("edit-form").resetValidation()})),u.addEventListener("click",(()=>{N.close()})),_.addEventListener("click",(()=>{B.close()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,