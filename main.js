!function(){"use strict";class e{constructor(e,t){this._settings=e,this._form=t}_showInputError(e,t){const o=this._form.querySelector(".".concat(e.id,"-error"));e.classList.add(this._settings.inputErrorClass),o.textContent=t,o.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._form.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._settings.inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)):(this._buttonElement.classList.remove(this._settings.inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._settings.inputSelector)),this._buttonElement=this._form.querySelector(this._settings.submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e),this._toggleButtonState()}))}enableValidation(){this._setEventListeners(this._form),this._form.addEventListener("submit",(function(e){e.preventDefault()}))}}function t(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}document.querySelector(".popup-photo");class o{constructor(e,o,n){let{name:r,link:s}=e;t(this,"_handleLikeEvent",(()=>{this._element.querySelector(".photo-card__like-button").classList.toggle("photo-card__like-button_active")})),t(this,"_handleDeleteEvent",(()=>{this._element.remove(),this._element=null})),this._name=r,this._image=s,this._cardSelector=o,this._handleCardClick=n}createCard(){return this._element=this._createNewPhotoCardElement(),this._addEventListeners(),this._element}_addEventListeners(){const e=this._element.querySelector(".photo-card__like-button");this._addLikeEventListener(e);const t=this._element.querySelector(".photo-card__delete-button");this._addDeleteEventListener(t);const o=this._element.querySelector(".photo-card__photo");this._addOpenPhotoEventListener(o)}_createNewPhotoCardElement(){const e=this._cardSelector.querySelector(".photo-card").cloneNode(!0),t=e.querySelector(".photo-card__photo"),o=e.querySelector(".photo-card__title");return t.src=this._image,t.alt=this._name,o.textContent=this._name,e}_addLikeEventListener(e){e.addEventListener("click",this._handleLikeEvent)}_addDeleteEventListener(e){e.addEventListener("click",this._handleDeleteEvent)}_addOpenPhotoEventListener(e){e.addEventListener("click",(()=>{this._handleCardClick()}))}}function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}class r{constructor(e){n(this,"_handleEscClose",(e=>{"Escape"==e.key&&this._popup.classList.contains("popup_opened")&&this.close()})),n(this,"_handleClickOnOverlayClose",(e=>{e.target.classList.contains("popup")&&this.close()})),this._popup=document.querySelector(e)}open(){this._popup.classList.add("popup_opened"),this.setEventListeners()}close(){this._popup.classList.remove("popup_opened"),this.removeEventListeners()}setEventListeners(){document.addEventListener("click",this._handleClickOnOverlayClose),document.addEventListener("keydown",this._handleEscClose),this._popup.querySelector(".popup__close-button").addEventListener("click",close)}removeEventListeners(){document.removeEventListener("click",this._handleClickOnOverlayClose),document.removeEventListener("keydown",this._handleEscClose),this._popup.querySelector(".popup__close-button").removeEventListener("click",close)}}class s extends r{constructor(e,t){var o,n;super(e),n=e=>{e.preventDefault(),this._handleSubmit(),this.close()},(o="_handleProfileFormSubmit")in this?Object.defineProperty(this,o,{value:n,enumerable:!0,configurable:!0,writable:!0}):this[o]=n,this._handleSubmit=t,this._form=this._popup.querySelector(".form")}_getInputValues(){const e={};return Array.from(this._popup.querySelectorAll(".form__text-input")).forEach((t=>{e[t.getAttribute("name")]=t.value})),e}setEventListeners(){this._form.addEventListener("submit",this._handleProfileFormSubmit),super.setEventListeners()}removeEventListeners(){this._form.removeEventListener("submit",this._handleProfileFormSubmit),super.removeEventListeners()}close(){this._form.reset(),super.close()}}const i=document.querySelector(".popup-edit"),l=document.querySelector(".popup-add"),a=document.querySelector(".popup-photo"),c=i.querySelector(".popup__close-button"),u=l.querySelector(".popup__close-button"),d=a.querySelector(".popup__close-button"),_=i.querySelector(".form"),p=_.querySelector('.form__text-input[name="name"]'),h=_.querySelector('.form__text-input[name="about-me"]'),m=l.querySelector(".form"),v=m.querySelector('.form__text-input[name="title"]'),b=m.querySelector('.form__text-input[name="image-link"]'),S=document.querySelector(".profile"),f=S.querySelector(".profile__edit-button"),y=S.querySelector(".profile__add-button"),E=document.querySelector("#photo-card__template").content,L=new Map,g={formSelector:".form",inputSelector:".form__text-input",submitButtonSelector:".form__submit-button",inactiveButtonClass:"form__submit-button_disabled",inputErrorClass:"form__text-input-error_active",errorClass:"form__input-error_visible"};function q(){x.open(this._image,this._name)}const k=new class{constructor(e){let{nameSelector:t,jobSelector:o}=e;this._nameSelector=t,this._jobSelector=o}getUserInfo(){return{name:document.querySelector(this._nameSelector).textContent,job:document.querySelector(this._jobSelector).textContent}}setUserInfo(e){let{newName:t,newJob:o}=e;const n=document.querySelector(this._nameSelector),r=document.querySelector(this._jobSelector);n.textContent=t,r.textContent=o}}({nameSelector:".profile__name",jobSelector:".profile__description"});k.setUserInfo({newName:"Jacques Cousteau",newJob:"Explorer"});const C=new s(".popup-add",(function(){const e={name:v.value,link:b.value},t=new o(e,E,q);I.addItem(t.createCard())})),w=new s(".popup-edit",(function(){k.setUserInfo({newName:p.value,newJob:h.value})})),x=new class extends r{constructor(e){super(e)}open(e,t){const o=this._popup.querySelector(".popup-photo__container"),n=o.querySelector(".popup-photo__photo"),r=o.querySelector(".popup-photo__title");n.src=e,r.textContent=t,n.alt=t,super.open()}}(".popup-photo"),I=new class{constructor(e,t){let{items:o,renderer:n}=e;this._items=o,this._renderer=n,this._container=document.querySelector(t)}clear(){this._container.innerHTML=""}renderer(){this.clear(),this._items.forEach((e=>{this.addItem(this._renderer(e))}))}addItem(e){this._container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderer:function(e){return new o(e,E,q).createCard()}},".photos__grid");I.renderer(),Array.from(document.querySelectorAll(g.formSelector)).forEach((t=>{const o=t.getAttribute("name"),n=new e(g,t);n.enableValidation(),L.set(o,n)})),y.addEventListener("click",(()=>{C.open(),L.get("add-form").resetValidation()})),u.addEventListener("click",(()=>{C.close()})),f.addEventListener("click",(()=>{const e=k.getUserInfo();p.value=e.name,h.value=e.job,w.open(),L.get("edit-form").resetValidation()})),c.addEventListener("click",(()=>{w.close()})),d.addEventListener("click",(()=>{x.close()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,