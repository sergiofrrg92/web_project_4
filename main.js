!function(){"use strict";class e{constructor(e,t){this._settings=e,this._form=t}_showInputError(e,t){const o=this._form.querySelector(".".concat(e.id,"-error"));e.classList.add(this._settings.inputErrorClass),o.textContent=t,o.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._form.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._settings.inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)):(this._buttonElement.classList.remove(this._settings.inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._settings.inputSelector)),this._buttonElement=this._form.querySelector(this._settings.submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e),this._toggleButtonState()}))}enableValidation(){this._setEventListeners(this._form),this._form.addEventListener("submit",(function(e){e.preventDefault()}))}}function t(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}document.querySelector(".popup-photo");class o{constructor(e,o,r){let{name:s,link:n}=e;t(this,"_handleLikeEvent",(()=>{this._element.querySelector(".photo-card__like-button").classList.toggle("photo-card__like-button_active")})),t(this,"_handleDeleteEvent",(()=>{this._element.remove(),this._element=null})),this._name=s,this._image=n,this._cardSelector=o,this._handleCardClick=r}createCard(){return this._element=this._createNewPhotoCardElement(),this._addEventListeners(),this._element}_addEventListeners(){const e=this._element.querySelector(".photo-card__like-button");this._addLikeEventListener(e);const t=this._element.querySelector(".photo-card__delete-button");this._addDeleteEventListener(t);const o=this._element.querySelector(".photo-card__photo");this._addOpenPhotoEventListener(o)}_createNewPhotoCardElement(){const e=this._cardSelector.querySelector(".photo-card").cloneNode(!0),t=e.querySelector(".photo-card__photo"),o=e.querySelector(".photo-card__title");return t.src=this._image,t.alt=this._name,o.textContent=this._name,e}_addLikeEventListener(e){e.addEventListener("click",this._handleLikeEvent)}_addDeleteEventListener(e){e.addEventListener("click",this._handleDeleteEvent)}_addOpenPhotoEventListener(e){e.addEventListener("click",(()=>{this._handleCardClick()}))}}function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}class s{constructor(e){r(this,"_handleEscClose",(e=>{"Escape"==e.key&&this._popup.classList.contains("popup_opened")&&this.close()})),r(this,"_handleClickOnOverlayClose",(e=>{e.target.classList.contains("popup")&&this.close()})),this._popup=document.querySelector(e)}open(){this._popup.classList.add("popup_opened"),this.setEventListeners()}close(){this._popup.classList.remove("popup_opened"),this.removeEventListeners()}setEventListeners(){document.addEventListener("click",this._handleClickOnOverlayClose),document.addEventListener("keydown",this._handleEscClose),this._popup.querySelector(".popup__close-button").addEventListener("click",close)}removeEventListeners(){document.removeEventListener("click",this._handleClickOnOverlayClose),document.removeEventListener("keydown",this._handleEscClose),this._popup.querySelector(".popup__close-button").removeEventListener("click",close)}}class n extends s{constructor(e,t){var o,r;super(e),r=e=>{e.preventDefault(),this._handleSubmit(),this.close()},(o="_handleProfileFormSubmit")in this?Object.defineProperty(this,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[o]=r,this._handleSubmit=t,this._form=this._popup.querySelector(".form")}_getInputValues(){const e={};return Array.from(this._popup.querySelectorAll(".form__text-input")).forEach((t=>{e[t.getAttribute("name")]=t.value})),e}setEventListeners(){this._form.addEventListener("submit",this._handleProfileFormSubmit),super.setEventListeners()}removeEventListeners(){this._form.removeEventListener("submit",this._handleProfileFormSubmit),super.removeEventListeners()}close(){this._form.reset(),super.close()}}class i{constructor(e,t){let{items:o,renderer:r}=e;this._items=o,this._renderer=r,this._container=document.querySelector(t)}clear(){this._container.innerHTML=""}renderer(){this.clear(),this._items.forEach((e=>{this.addItem(this._renderer(e))}))}addItem(e){this._container.prepend(e)}}const c=document.querySelector(".popup-edit"),l=document.querySelector(".popup-add"),a=document.querySelector(".popup-photo"),u=c.querySelector(".popup__close-button"),h=l.querySelector(".popup__close-button"),d=a.querySelector(".popup__close-button"),_=c.querySelector(".form"),p=_.querySelector('.form__text-input[name="name"]'),m=_.querySelector('.form__text-input[name="about-me"]'),f=l.querySelector(".form"),v=f.querySelector('.form__text-input[name="title"]'),b=f.querySelector('.form__text-input[name="image-link"]'),E=document.querySelector(".profile"),S=E.querySelector(".profile__edit-button"),y=E.querySelector(".profile__add-button"),L=document.querySelector("#photo-card__template").content,g=new Map,q={formSelector:".form",inputSelector:".form__text-input",submitButtonSelector:".form__submit-button",inactiveButtonClass:"form__submit-button_disabled",inputErrorClass:"form__text-input-error_active",errorClass:"form__input-error_visible"};function C(e){return new o(e,L,k).createCard()}function k(){A.open(this._image,this._name)}const I=new class{constructor(e){this._options=e}getInitialCards(){return fetch(this._options.baseUrl+"/cards/",{headers:this._options.headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).then((e=>e)).catch((e=>Promise.reject("Error: ".concat(e.status)))).finally((()=>{console.log("All done")}))}setNewCard(e){let{cardName:t,cardLink:o}=e;return fetch(this._options.baseUrl+"/cards/",{method:"POST",headers:this._options.headers,body:JSON.stringify({name:t,link:o})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).then((e=>e)).catch((e=>Promise.reject("Error: ".concat(e.status)))).finally((()=>{console.log("All done")}))}getCardLikes(){}getUserInfo(){return fetch(this._options.baseUrl+"/users/me",{headers:this._options.headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).then((e=>e)).catch((e=>Promise.reject("Error: ".concat(e.status)))).finally((()=>{console.log("All done")}))}setUserInfo(e){let{newName:t,newAbout:o}=e;return fetch(this._options.baseUrl+"/users/me",{method:"PATCH",headers:this._options.headers,body:JSON.stringify({name:t,about:o})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).then((e=>e)).catch((e=>Promise.reject("Error: ".concat(e.status)))).finally((()=>{console.log("All done")}))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"b9d1c3b6-c0f4-4224-ad8f-4c81efa3f89d","Content-Type":"application/json"}}),w=new class{constructor(e){let{nameSelector:t,jobSelector:o}=e;this._nameSelector=t,this._jobSelector=o}getUserInfo(){return{name:document.querySelector(this._nameSelector).textContent,job:document.querySelector(this._jobSelector).textContent}}setUserInfo(e){let{name:t,about:o}=e;const r=document.querySelector(this._nameSelector),s=document.querySelector(this._jobSelector);r.textContent=t,s.textContent=o}}({nameSelector:".profile__name",jobSelector:".profile__description"});let j;I.getUserInfo().then((e=>{w.setUserInfo(e)})),I.getInitialCards().then((e=>{j=new i({items:e,renderer:C},".photos__grid"),j.renderer()}));const P=new n(".popup-add",(function(){const e={cardName:v.value,cardLink:b.value};I.setNewCard(e).then((e=>{const t=new o(e,L,k);j.addItem(t.createCard())}))})),x=new n(".popup-edit",(function(){I.setUserInfo({newName:p.value,newAbout:m.value}).then((e=>{w.setUserInfo(e)}))})),A=new class extends s{constructor(e){super(e)}open(e,t){const o=this._popup.querySelector(".popup-photo__container"),r=o.querySelector(".popup-photo__photo"),s=o.querySelector(".popup-photo__title");r.src=e,s.textContent=t,r.alt=t,super.open()}}(".popup-photo");Array.from(document.querySelectorAll(q.formSelector)).forEach((t=>{const o=t.getAttribute("name"),r=new e(q,t);r.enableValidation(),g.set(o,r)})),y.addEventListener("click",(()=>{P.open(),g.get("add-form").resetValidation()})),h.addEventListener("click",(()=>{P.close()})),S.addEventListener("click",(()=>{const e=w.getUserInfo();p.value=e.name,m.value=e.job,x.open(),g.get("edit-form").resetValidation()})),u.addEventListener("click",(()=>{x.close()})),d.addEventListener("click",(()=>{A.close()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,