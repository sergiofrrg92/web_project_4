!function(){"use strict";class e{constructor(e,t){this._settings=e,this._form=t}_showInputError(e,t){const o=this._form.querySelector(".".concat(e.id,"-error"));e.classList.add(this._settings.inputErrorClass),o.textContent=t,o.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._form.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._settings.inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)):(this._buttonElement.classList.remove(this._settings.inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._settings.inputSelector)),this._buttonElement=this._form.querySelector(this._settings.submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e),this._toggleButtonState()}))}enableValidation(){this._setEventListeners(this._form),this._form.addEventListener("submit",(function(e){e.preventDefault()}))}}function t(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}document.querySelector(".popup-photo");class o{constructor(e,o,r,s,n){let{_id:i,name:a,link:l,likes:c}=e;t(this,"_handleLikeEvent",(()=>{this._element.querySelector(".photo-card__like-button").classList.contains("photo-card__like-button_active")?this._handleLikeClick(!1):this._handleLikeClick(!0)})),t(this,"_handleDeleteEvent",(()=>{this._handleDeleteCardClick()})),this._id=i,this._name=a,this._image=l,this._likes=c,this._cardSelector=o,this._handleCardClick=r,this._handleDeleteCardClick=s,this._handleLikeClick=n}getId(){return this._id}createCard(){return this._element=this._createNewPhotoCardElement(),this._addEventListeners(),this._element}deleteCard(){this._element.remove(),this._element=null}updateLikes(e,t){this._likes=e;const o=this._element.querySelector(".photo-card__like-button");this._element.querySelector(".photo-card__like-count").textContent=this._likes.length,JSON.stringify(this._likes).includes(t)?o.classList.add("photo-card__like-button_active"):o.classList.remove("photo-card__like-button_active")}_addEventListeners(){const e=this._element.querySelector(".photo-card__like-button");this._addLikeEventListener(e);const t=this._element.querySelector(".photo-card__delete-button");this._addDeleteEventListener(t);const o=this._element.querySelector(".photo-card__photo");this._addOpenPhotoEventListener(o)}_createNewPhotoCardElement(){const e=this._cardSelector.querySelector(".photo-card").cloneNode(!0),t=e.querySelector(".photo-card__photo"),o=e.querySelector(".photo-card__title"),r=e.querySelector(".photo-card__like-count");return t.src=this._image,t.alt=this._name,o.textContent=this._name,r.textContent=this._likes.length,e}_addLikeEventListener(e){e.addEventListener("click",this._handleLikeEvent)}_addDeleteEventListener(e){e.addEventListener("click",this._handleDeleteEvent)}_addOpenPhotoEventListener(e){e.addEventListener("click",(()=>{this._handleCardClick()}))}}function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}class s{constructor(e){r(this,"_handleEscClose",(e=>{"Escape"==e.key&&this._popup.classList.contains("popup_opened")&&this.close()})),r(this,"_handleClickOnOverlayClose",(e=>{e.target.classList.contains("popup")&&this.close()})),this._popup=document.querySelector(e)}open(){this._popup.classList.add("popup_opened"),this.setEventListeners()}close(){this._popup.classList.remove("popup_opened"),this.removeEventListeners()}setEventListeners(){document.addEventListener("click",this._handleClickOnOverlayClose),document.addEventListener("keydown",this._handleEscClose),this._popup.querySelector(".popup__close-button").addEventListener("click",close)}removeEventListeners(){document.removeEventListener("click",this._handleClickOnOverlayClose),document.removeEventListener("keydown",this._handleEscClose),this._popup.querySelector(".popup__close-button").removeEventListener("click",close)}}class n extends s{constructor(e,t){var o,r;super(e),r=e=>{e.preventDefault(),this._handleSubmit()},(o="_handleProfileFormSubmit")in this?Object.defineProperty(this,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[o]=r,this._handleSubmit=t,this._form=this._popup.querySelector(".form"),this._submitButton=this._popup.querySelector(".form__submit-button")}_getInputValues(){const e={};return Array.from(this._popup.querySelectorAll(".form__text-input")).forEach((t=>{e[t.getAttribute("name")]=t.value})),e}setEventListeners(){this._form.addEventListener("submit",this._handleProfileFormSubmit),super.setEventListeners()}removeEventListeners(){this._form.removeEventListener("submit",this._handleProfileFormSubmit),super.removeEventListeners()}close(){this._form.reset(),super.close()}}class i{constructor(e,t){let{items:o,renderer:r}=e;this._items=o,this._renderer=r,this._container=document.querySelector(t)}clear(){this._container.innerHTML=""}renderer(){this.clear(),this._items.forEach((e=>{this.addItem(this._renderer(e))}))}addItem(e){this._container.prepend(e)}}const a=document.querySelector(".popup-edit"),l=document.querySelector(".popup-add"),c=document.querySelector(".popup-photo"),u=document.querySelector(".popup-delete"),d=document.querySelector(".popup-edit-avatar"),h=a.querySelector(".popup__close-button"),_=l.querySelector(".popup__close-button"),p=c.querySelector(".popup__close-button"),m=u.querySelector(".popup__close-button"),v=d.querySelector(".popup__close-button"),f=a.querySelector(".form"),S=f.querySelector('.form__text-input[name="name"]'),b=f.querySelector('.form__text-input[name="about-me"]'),y=l.querySelector(".form"),E=y.querySelector('.form__text-input[name="title"]'),k=y.querySelector('.form__text-input[name="image-link"]'),L=d.querySelector(".form").querySelector('.form__text-input[name="avatar-link"]'),g=document.querySelector(".profile"),C=g.querySelector(".profile__edit-button"),q=g.querySelector(".profile__add-button"),j=g.querySelector(".profile__photo-edit-button"),I=document.querySelector("#photo-card__template").content,P=new Map;let w;const x={formSelector:".form",inputSelector:".form__text-input",submitButtonSelector:".form__submit-button",inactiveButtonClass:"form__submit-button_disabled",inputErrorClass:"form__text-input-error_active",errorClass:"form__input-error_visible"};function A(e){const t=new o(e,I,U,B,O),r=t.createCard();return t.updateLikes(t._likes,D._id),r}function U(){H.open(this._image,this._name)}function B(){F.open(),w=this}function O(e){e?N.addLike(this.getId()).then((e=>{console.log("Like added succesfully",e.likes),this.updateLikes(e.likes,D._id)})):N.removeLike(this.getId()).then((e=>{console.log("Like removed succesfully",e.likes),this.updateLikes(e.likes,D._id)}))}const N=new class{constructor(e){this._options=e}getInitialCards(){return fetch(this._options.baseUrl+"/cards/",{headers:this._options.headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).then((e=>e)).catch((e=>Promise.reject("Error: ".concat(e.status)))).finally((()=>{console.log("All done")}))}setNewCard(e){let{cardName:t,cardLink:o}=e;return fetch(this._options.baseUrl+"/cards/",{method:"POST",headers:this._options.headers,body:JSON.stringify({name:t,link:o})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).then((e=>e)).catch((e=>Promise.reject("Error: ".concat(e.status)))).finally((()=>{console.log("All done")}))}addLike(e){return fetch(this._options.baseUrl+"/cards/likes/"+e,{method:"PUT",headers:this._options.headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).then((e=>e)).catch((e=>Promise.reject("Error: ".concat(e.status)))).finally((()=>{console.log("All done")}))}removeLike(e){return fetch(this._options.baseUrl+"/cards/likes/"+e,{method:"DELETE",headers:this._options.headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).then((e=>e)).catch((e=>Promise.reject("Error: ".concat(e.status)))).finally((()=>{console.log("All done")}))}deleteCard(e){return fetch(this._options.baseUrl+"/cards/"+e,{method:"DELETE",headers:this._options.headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status,", ").concat(e.body)))).then((e=>e)).catch((e=>Promise.reject("Error: ".concat(e.status,", ").concat(e.body)))).finally((()=>{console.log("All done")}))}getUserInfo(){return fetch(this._options.baseUrl+"/users/me",{headers:this._options.headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).then((e=>e)).catch((e=>Promise.reject("Error: ".concat(e.status)))).finally((()=>{console.log("All done")}))}setUserInfo(e){let{newName:t,newAbout:o}=e;return fetch(this._options.baseUrl+"/users/me",{method:"PATCH",headers:this._options.headers,body:JSON.stringify({name:t,about:o})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).then((e=>e)).catch((e=>Promise.reject("Error: ".concat(e.status)))).finally((()=>{console.log("All done")}))}updateAvatar(e){return fetch(this._options.baseUrl+"/users/me/avatar",{method:"PATCH",headers:this._options.headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).then((e=>e)).catch((e=>Promise.reject("Error: ".concat(e.status)))).finally((()=>{console.log("All done")}))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"b9d1c3b6-c0f4-4224-ad8f-4c81efa3f89d","Content-Type":"application/json"}}),D=new class{constructor(e){let{nameSelector:t,jobSelector:o,avatarSelector:r}=e;this._nameSelector=t,this._jobSelector=o,this._avatarSelector=r}getUserInfo(){return{name:document.querySelector(this._nameSelector).textContent,job:document.querySelector(this._jobSelector).textContent,avatar:document.querySelector(this._avatarSelector).src}}setUserInfo(e){let{name:t,about:o,_id:r,avatar:s}=e;const n=document.querySelector(this._nameSelector),i=document.querySelector(this._jobSelector),a=document.querySelector(this._avatarSelector);n.textContent=t,i.textContent=o,a.src=s,this._id=r}}({nameSelector:".profile__name",jobSelector:".profile__description",avatarSelector:".profile__photo"});let V;N.getUserInfo().then((e=>{console.log(e),D.setUserInfo(e)})),N.getInitialCards().then((e=>{V=new i({items:e,renderer:A},".photos__grid"),V.renderer()}));const T=new n(".popup-add",(function(){const e={cardName:E.value,cardLink:k.value};this._submitButton.textContent="Saving...",N.setNewCard(e).then((e=>{const t=new o(e,I,U,B,O);V.addItem(t.createCard()),t.updateLikes(t._likes,D._id)})).finally((()=>{this.close(),this._submitButton.textContent="Create"}))})),J=new n(".popup-edit",(function(){this._submitButton.textContent="Saving...",N.setUserInfo({newName:S.value,newAbout:b.value}).then((e=>{D.setUserInfo(e)})).finally((()=>{this.close(),this._submitButton.textContent="Save"}))})),F=new n(".popup-delete",(function(){N.deleteCard(w.getId()).then((()=>{console.log("Card deleted"),w.deleteCard(),w=null}))})),H=new class extends s{constructor(e){super(e)}open(e,t){const o=this._popup.querySelector(".popup-photo__container"),r=o.querySelector(".popup-photo__photo"),s=o.querySelector(".popup-photo__title");r.src=e,s.textContent=t,r.alt=t,super.open()}}(".popup-photo"),M=new n(".popup-edit-avatar",(function(){this._submitButton.textContent="Saving...",N.updateAvatar(L.value).then((e=>{console.log("Avatar updated ",e),D.setUserInfo(e)})).finally((()=>{this.close(),this._submitButton.textContent="Save"}))}));Array.from(document.querySelectorAll(x.formSelector)).forEach((t=>{const o=t.getAttribute("name"),r=new e(x,t);r.enableValidation(),P.set(o,r)})),q.addEventListener("click",(()=>{T.open(),P.get("add-form").resetValidation()})),_.addEventListener("click",(()=>{T.close()})),C.addEventListener("click",(()=>{const e=D.getUserInfo();S.value=e.name,b.value=e.job,J.open(),P.get("edit-form").resetValidation()})),h.addEventListener("click",(()=>{J.close()})),p.addEventListener("click",(()=>{H.close()})),j.addEventListener("click",(()=>{M.open(),P.get("edit-avatar-form").resetValidation()})),v.addEventListener("click",(()=>{M.close()})),m.addEventListener("click",(()=>{F.close()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,