!function(){"use strict";class e{constructor(e,t){this._settings=e,this._form=t}_showInputError(e,t){const o=this._form.querySelector(".".concat(e.id,"-error"));e.classList.add(this._settings.inputErrorClass),o.textContent=t,o.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._form.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._settings.inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)):(this._buttonElement.classList.remove(this._settings.inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._settings.inputSelector)),this._buttonElement=this._form.querySelector(this._settings.submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e),this._toggleButtonState()}))}enableValidation(){this._setEventListeners(this._form),this._form.addEventListener("submit",(function(e){e.preventDefault()}))}}function t(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}document.querySelector(".popup-photo");class o{constructor(e,o,s,n,r){let{_id:i,name:a,link:l,likes:c}=e;t(this,"_handleLikeEvent",(()=>{this._element.querySelector(".photo-card__like-button").classList.contains("photo-card__like-button_active")?this._handleLikeClick(this,!1):this._handleLikeClick(this,!0)})),t(this,"_handleDeleteEvent",(()=>{this._handleDeleteCardClick(this)})),this._id=i,this._name=a,this._image=l,this._likes=c,this._cardSelector=o,this._handleCardClick=s,this._handleDeleteCardClick=n,this._handleLikeClick=r}getId(){return this._id}getName(){return this._name}getImageLink(){return this._image}createCard(){return this._element=this._createNewPhotoCardElement(),this._addEventListeners(),this._element}deleteCard(){this._element.remove(),this._element=null}updateLikes(e,t){this._likes=e;const o=this._element.querySelector(".photo-card__like-button");this._element.querySelector(".photo-card__like-count").textContent=this._likes.length,JSON.stringify(this._likes).includes(t)?o.classList.add("photo-card__like-button_active"):o.classList.remove("photo-card__like-button_active")}_addEventListeners(){const e=this._element.querySelector(".photo-card__like-button");this._addLikeEventListener(e);const t=this._element.querySelector(".photo-card__delete-button");this._addDeleteEventListener(t);const o=this._element.querySelector(".photo-card__photo");this._addOpenPhotoEventListener(o)}_createNewPhotoCardElement(){const e=this._cardSelector.querySelector(".photo-card").cloneNode(!0),t=e.querySelector(".photo-card__photo"),o=e.querySelector(".photo-card__title"),s=e.querySelector(".photo-card__like-count");return t.src=this._image,t.alt=this._name,o.textContent=this._name,s.textContent=this._likes.length,e}_addLikeEventListener(e){e.addEventListener("click",this._handleLikeEvent)}_addDeleteEventListener(e){e.addEventListener("click",this._handleDeleteEvent)}_addOpenPhotoEventListener(e){e.addEventListener("click",(()=>{this._handleCardClick(this)}))}}function s(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}class n{constructor(e){s(this,"close",(()=>{this._popup.classList.remove("popup_opened"),this.removeEventListeners()})),s(this,"_handleEscClose",(e=>{"Escape"==e.key&&this._popup.classList.contains("popup_opened")&&this.close()})),s(this,"_handleClickOnOverlayClose",(e=>{e.target.classList.contains("popup")&&this.close()})),this._popup=document.querySelector(e)}open(){this._popup.classList.add("popup_opened"),this.setEventListeners()}setEventListeners(){document.addEventListener("click",this._handleClickOnOverlayClose),document.addEventListener("keydown",this._handleEscClose),this._popup.querySelector(".popup__close-button").addEventListener("click",this.close)}removeEventListeners(){document.removeEventListener("click",this._handleClickOnOverlayClose),document.removeEventListener("keydown",this._handleEscClose),this._popup.querySelector(".popup__close-button").removeEventListener("click",close)}}class r extends n{constructor(e,t){var o,s;super(e),s=e=>{e.preventDefault(),this._handleSubmit(this,this._getInputValues())},(o="_handleProfileFormSubmit")in this?Object.defineProperty(this,o,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[o]=s,this._handleSubmit=t,this._form=this._popup.querySelector(".form"),this._submitButton=this._popup.querySelector(".form__submit-button")}_getInputValues(){const e={};return Array.from(this._popup.querySelectorAll(".form__text-input")).forEach((t=>{e[t.getAttribute("name")]=t.value})),e}setButtonText(e){this._submitButton.textContent=e}setEventListeners(){this._form.addEventListener("submit",this._handleProfileFormSubmit),super.setEventListeners()}removeEventListeners(){this._form.removeEventListener("submit",this._handleProfileFormSubmit),super.removeEventListeners()}close(){this._form.reset(),super.close()}}class i{constructor(e,t){let{items:o,renderer:s}=e;this._items=o,this._renderer=s,this._container=document.querySelector(t)}clear(){this._container.innerHTML=""}renderer(){this.clear(),this._items.forEach((e=>{this.addItem(this._renderer(e))}))}addItem(e){this._container.prepend(e)}}const a=document.querySelector(".popup-edit"),l=document.querySelector(".popup-add"),c=document.querySelector(".popup-photo"),h=document.querySelector(".popup-delete"),u=document.querySelector(".popup-edit-avatar"),d=(a.querySelector(".popup__close-button"),l.querySelector(".popup__close-button"),c.querySelector(".popup__close-button"),h.querySelector(".popup__close-button"),u.querySelector(".popup__close-button"),a.querySelector(".form")),_=d.querySelector('.form__text-input[name="name"]'),p=d.querySelector('.form__text-input[name="about-me"]'),m=l.querySelector(".form"),v=(m.querySelector('.form__text-input[name="title"]'),m.querySelector('.form__text-input[name="image-link"]'),u.querySelector(".form").querySelector('.form__text-input[name="avatar-link"]'),document.querySelector(".profile")),f=v.querySelector(".profile__edit-button"),S=v.querySelector(".profile__add-button"),b=v.querySelector(".profile__photo-edit-button"),y=document.querySelector("#photo-card__template").content,k=new Map,g={formSelector:".form",inputSelector:".form__text-input",submitButtonSelector:".form__submit-button",inactiveButtonClass:"form__submit-button_disabled",inputErrorClass:"form__text-input-error_active",errorClass:"form__input-error_visible"};let L;function E(e){const t=new o(e,y,C,q,I),s=t.createCard();return t.updateLikes(t._likes,w._id),s}function C(e){O.open(e.getImageLink(),e.getName())}function q(e){T.open(),L=e}function I(e,t){t?x.addLike(e.getId()).then((t=>{console.log("Like added succesfully",t.likes),e.updateLikes(t.likes,w.getId())})).catch((e=>{console.log(e)})):x.removeLike(e.getId()).then((t=>{console.log("Like removed succesfully",t.likes),e.updateLikes(t.likes,w.getId())})).catch((e=>{console.log(e)}))}const x=new class{constructor(e){this._options=e}getInitialCards(){return fetch(this._options.baseUrl+"/cards/",{headers:this._options.headers}).then((e=>this._checkResponse(e))).then((e=>e))}setNewCard(e){let{cardName:t,cardLink:o}=e;return fetch(this._options.baseUrl+"/cards/",{method:"POST",headers:this._options.headers,body:JSON.stringify({name:t,link:o})}).then((e=>this._checkResponse(e))).then((e=>e))}addLike(e){return fetch(this._options.baseUrl+"/cards/likes/"+e,{method:"PUT",headers:this._options.headers}).then((e=>this._checkResponse(e))).then((e=>e))}removeLike(e){return fetch(this._options.baseUrl+"/cards/likes/"+e,{method:"DELETE",headers:this._options.headers}).then((e=>this._checkResponse(e))).then((e=>e))}deleteCard(e){return fetch(this._options.baseUrl+"/cards/"+e,{method:"DELETE",headers:this._options.headers}).then((e=>this._checkResponse(e))).then((e=>e))}getUserInfo(){return fetch(this._options.baseUrl+"/users/me",{headers:this._options.headers}).then((e=>this._checkResponse(e))).then((e=>e))}setUserInfo(e){let{newName:t,newAbout:o}=e;return fetch(this._options.baseUrl+"/users/me",{method:"PATCH",headers:this._options.headers,body:JSON.stringify({name:t,about:o})}).then((e=>this._checkResponse(e))).then((e=>e))}updateAvatar(e){return fetch(this._options.baseUrl+"/users/me/avatar",{method:"PATCH",headers:this._options.headers,body:JSON.stringify({avatar:e})}).then((e=>this._checkResponse(e))).then((e=>e))}_checkResponse(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"b9d1c3b6-c0f4-4224-ad8f-4c81efa3f89d","Content-Type":"application/json"}}),w=new class{constructor(e){let{nameSelector:t,jobSelector:o,avatarSelector:s}=e;this._nameSelector=t,this._jobSelector=o,this._avatarSelector=s}getId(){return this._id?this._id:null}getUserInfo(){return{name:document.querySelector(this._nameSelector).textContent,job:document.querySelector(this._jobSelector).textContent,avatar:document.querySelector(this._avatarSelector).src}}setUserInfo(e){let{name:t,about:o,_id:s,avatar:n}=e;const r=document.querySelector(this._nameSelector),i=document.querySelector(this._jobSelector),a=document.querySelector(this._avatarSelector);r.textContent=t,i.textContent=o,a.src=n,this._id=s}}({nameSelector:".profile__name",jobSelector:".profile__description",avatarSelector:".profile__photo"});let B;Promise.all([x.getUserInfo(),x.getInitialCards()]).then((e=>{let[t,o]=e;w.setUserInfo(t),B=new i({items:o,renderer:E},".photos__grid"),B.renderer()})).catch((e=>{console.log(e)}));const U=new r(".popup-add",(function(e,t){const o={cardName:t.title,cardLink:t["image-link"]};e.setButtonText("Saving..."),x.setNewCard(o).then((t=>{B.addItem(E(t)),e.close()})).catch((e=>{console.log(e)})).finally((()=>{e.setButtonText("Create")}))})),A=new r(".popup-edit",(function(e,t){e.setButtonText("Saving..."),x.setUserInfo({newName:t.name,newAbout:t["about-me"]}).then((t=>{w.setUserInfo(t),e.close()})).catch((e=>{console.log(e)})).finally((()=>{e.setButtonText("Save")}))})),T=new r(".popup-delete",(function(e){e.setButtonText("Deleting..."),x.deleteCard(L.getId()).then((()=>{L.deleteCard(),L=null,e.close()})).catch((e=>{console.log(e)})).finally((()=>{e.setButtonText("Yes")}))})),O=new class extends n{constructor(e){super(e)}open(e,t){const o=this._popup.querySelector(".popup-photo__container"),s=o.querySelector(".popup-photo__photo"),n=o.querySelector(".popup-photo__title");s.src=e,n.textContent=t,s.alt=t,super.open()}}(".popup-photo"),P=new r(".popup-edit-avatar",(function(e,t){e.setButtonText("Saving..."),x.updateAvatar(t["avatar-link"]).then((t=>{console.log("Avatar updated ",t),w.setUserInfo(t),e.close()})).catch((e=>{console.log(e)})).finally((()=>{e.setButtonText("Save")}))}));Array.from(document.querySelectorAll(g.formSelector)).forEach((t=>{const o=t.getAttribute("name"),s=new e(g,t);s.enableValidation(),k.set(o,s)})),S.addEventListener("click",(()=>{U.open(),k.get("add-form").resetValidation()})),f.addEventListener("click",(()=>{const e=w.getUserInfo();_.value=e.name,p.value=e.job,A.open(),k.get("edit-form").resetValidation()})),b.addEventListener("click",(()=>{P.open(),k.get("edit-avatar-form").resetValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,