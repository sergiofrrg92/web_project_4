!function(){"use strict";class e{constructor(e,t){this._settings=e,this._form=t}_showInputError(e,t){const s=this._form.querySelector(".".concat(e.id,"-error"));e.classList.add(this._settings.inputErrorClass),s.textContent=t,s.classList.add(this._settings.errorClass)}_hideInputError(e){const t=this._form.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._settings.inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)):(this._buttonElement.classList.remove(this._settings.inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._settings.inputSelector)),this._buttonElement=this._form.querySelector(this._settings.submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._setEventListeners(),this._form.addEventListener("submit",(function(e){e.preventDefault()}))}}function t(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class s{constructor(e,s,o,n,i,r){let{_id:l,name:a,link:c,likes:h,owner:u}=e;t(this,"_handleLikeEvent",(()=>{this._likeButton.classList.contains("photo-card__like-button_active")?this._handleLikeClick(this,!1):this._handleLikeClick(this,!0)})),t(this,"_handleDeleteEvent",(()=>{this._handleDeleteCardClick(this)})),this._id=l,this._currentUserId=s,this._name=a,this._image=c,this._likes=h,this._owner=u,this._cardSelector=o,this._handleCardClick=n,this._handleDeleteCardClick=i,this._handleLikeClick=r}getId(){return this._id}getName(){return this._name}getImageLink(){return this._image}createCard(){return this._element=this._createNewPhotoCardElement(),this._likeCountElement=this._element.querySelector(".photo-card__like-count"),this._likeButton=this._element.querySelector(".photo-card__like-button"),this._deleteButton=this._element.querySelector(".photo-card__delete-button"),this._photo=this._element.querySelector(".photo-card__photo"),this.updateLikes(this._likes,this._currentUserId),this._owner._id!=this._currentUserId&&(this._deleteButton.remove(),this._deleteButton=null),this._addEventListeners(),this._element}deleteCard(){this._element.remove(),this._element=null}updateLikes(e,t){this._likes=e,this._likeCountElement.textContent=this._likes.length,JSON.stringify(this._likes).includes(t)?this._likeButton.classList.add("photo-card__like-button_active"):this._likeButton.classList.remove("photo-card__like-button_active")}_addEventListeners(){this._addLikeEventListener(),this._addOpenPhotoEventListener(),this._deleteButton&&this._addDeleteEventListener()}_createNewPhotoCardElement(){const e=this._cardSelector.querySelector(".photo-card").cloneNode(!0),t=e.querySelector(".photo-card__photo"),s=e.querySelector(".photo-card__title"),o=e.querySelector(".photo-card__like-count");return t.src=this._image,t.alt=this._name,s.textContent=this._name,o.textContent=this._likes.length,e}_addLikeEventListener(){this._likeButton.addEventListener("click",this._handleLikeEvent)}_addDeleteEventListener(){this._deleteButton.addEventListener("click",this._handleDeleteEvent)}_addOpenPhotoEventListener(){this._photo.addEventListener("click",(()=>{this._handleCardClick(this)}))}}function o(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class n{constructor(e){o(this,"_handleEscClose",(e=>{"Escape"==e.key&&this.close()})),o(this,"_handleClickOnOverlayClose",(e=>{e.target.classList.contains("popup")&&this.close()})),this._popup=document.querySelector(e),this._closeButton=this._popup.querySelector(".popup__close-button"),this.close=this.close.bind(this)}open(){this._popup.classList.add("popup_opened"),this.setEventListeners()}close(){this._popup.classList.remove("popup_opened"),this.removeEventListeners()}setEventListeners(){document.addEventListener("mousedown",this._handleClickOnOverlayClose),document.addEventListener("keydown",this._handleEscClose),this._closeButton.addEventListener("click",this.close)}removeEventListeners(){document.removeEventListener("mousedown",this._handleClickOnOverlayClose),document.removeEventListener("keydown",this._handleEscClose),this._closeButton.removeEventListener("click",close)}}class i extends n{constructor(e,t){var s,o;super(e),o=e=>{e.preventDefault(),this._handleSubmit(this,this._getInputValues())},(s="_handleProfileFormSubmit")in this?Object.defineProperty(this,s,{value:o,enumerable:!0,configurable:!0,writable:!0}):this[s]=o,this._handleSubmit=t,this._form=this._popup.querySelector(".form"),this._submitButton=this._popup.querySelector(".form__submit-button"),this._inputs=Array.from(this._popup.querySelectorAll(".form__text-input"))}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.getAttribute("name")]=t.value})),e}setButtonText(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Saving...";this._submitButton.textContent=e}setEventListeners(){this._form.addEventListener("submit",this._handleProfileFormSubmit),super.setEventListeners()}removeEventListeners(){this._form.removeEventListener("submit",this._handleProfileFormSubmit),super.removeEventListeners()}close(){this._form.reset(),super.close()}}class r{constructor(e,t){let{items:s,renderer:o}=e;this._items=s,this._renderer=o,this._container=document.querySelector(t)}clear(){this._container.innerHTML=""}renderer(){this.clear(),this._items.forEach((e=>{this.addItem(e)}))}addItem(e){const t=this._renderer(e);this._container.prepend(t)}}const l=document.querySelector(".popup-edit"),a=document.querySelector(".popup-add"),c=document.querySelector(".popup-photo"),h=document.querySelector(".popup-delete"),u=document.querySelector(".popup-edit-avatar"),_=(l.querySelector(".popup__close-button"),a.querySelector(".popup__close-button"),c.querySelector(".popup__close-button"),h.querySelector(".popup__close-button"),u.querySelector(".popup__close-button"),l.querySelector(".form")),d=_.querySelector('.form__text-input[name="name"]'),p=_.querySelector('.form__text-input[name="about-me"]'),m=a.querySelector(".form"),v=(m.querySelector('.form__text-input[name="title"]'),m.querySelector('.form__text-input[name="image-link"]'),u.querySelector(".form").querySelector('.form__text-input[name="avatar-link"]'),document.querySelector(".profile")),f=v.querySelector(".profile__edit-button"),b=v.querySelector(".profile__add-button"),S=v.querySelector(".profile__photo-edit-button"),k=document.querySelector("#photo-card__template").content,E=new Map,g={formSelector:".form",inputSelector:".form__text-input",submitButtonSelector:".form__submit-button",inactiveButtonClass:"form__submit-button_disabled",inputErrorClass:"form__text-input-error_active",errorClass:"form__input-error_visible"};let y;function L(e){return new s(e,w.getId(),k,C,q,I).createCard()}function C(e){O.open(e.getImageLink(),e.getName())}function q(e){T.open(),y=e}function I(e,t){t?B.addLike(e.getId()).then((t=>{console.log("Like added succesfully",t.likes),e.updateLikes(t.likes,w.getId())})).catch((e=>{console.log(e)})):B.removeLike(e.getId()).then((t=>{console.log("Like removed succesfully",t.likes),e.updateLikes(t.likes,w.getId())})).catch((e=>{console.log(e)}))}const B=new class{constructor(e){this._options=e}getInitialCards(){return fetch(this._options.baseUrl+"/cards/",{headers:this._options.headers}).then(this._checkResponse)}setNewCard(e){let{cardName:t,cardLink:s}=e;return fetch(this._options.baseUrl+"/cards/",{method:"POST",headers:this._options.headers,body:JSON.stringify({name:t,link:s})}).then(this._checkResponse)}addLike(e){return fetch(this._options.baseUrl+"/cards/likes/"+e,{method:"PUT",headers:this._options.headers}).then(this._checkResponse)}removeLike(e){return fetch(this._options.baseUrl+"/cards/likes/"+e,{method:"DELETE",headers:this._options.headers}).then(this._checkResponse)}deleteCard(e){return fetch(this._options.baseUrl+"/cards/"+e,{method:"DELETE",headers:this._options.headers}).then(this._checkResponse)}getUserInfo(){return fetch(this._options.baseUrl+"/users/me",{headers:this._options.headers}).then(this._checkResponse)}setUserInfo(e){let{newName:t,newAbout:s}=e;return fetch(this._options.baseUrl+"/users/me",{method:"PATCH",headers:this._options.headers,body:JSON.stringify({name:t,about:s})}).then(this._checkResponse)}updateAvatar(e){return fetch(this._options.baseUrl+"/users/me/avatar",{method:"PATCH",headers:this._options.headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}_checkResponse(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"b9d1c3b6-c0f4-4224-ad8f-4c81efa3f89d","Content-Type":"application/json"}}),w=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:o}=e;this._nameSelector=t,this._jobSelector=s,this._avatarSelector=o,this._nameElement=document.querySelector(this._nameSelector),this._jobElement=document.querySelector(this._jobSelector),this._avatarElement=document.querySelector(this._avatarSelector)}getId(){return this._id?this._id:null}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,about:s,_id:o,avatar:n}=e;this._nameElement.textContent=t,this._jobElement.textContent=s,this._avatarElement.src=n,this._id=o}}({nameSelector:".profile__name",jobSelector:".profile__description",avatarSelector:".profile__photo"});let x;Promise.all([B.getUserInfo(),B.getInitialCards()]).then((e=>{let[t,s]=e;w.setUserInfo(t),console.log(t),x=new r({items:s,renderer:L},".photos__grid"),x.renderer()})).catch((e=>{console.log(e)}));const U=new i(".popup-add",(function(e,t){const s={cardName:t.title,cardLink:t["image-link"]};e.setButtonText("Saving..."),B.setNewCard(s).then((t=>{x.addItem(t),e.close()})).catch((e=>{console.log(e)})).finally((()=>{e.setButtonText("Create")}))})),A=new i(".popup-edit",(function(e,t){e.setButtonText("Saving..."),B.setUserInfo({newName:t.name,newAbout:t["about-me"]}).then((t=>{w.setUserInfo(t),e.close()})).catch((e=>{console.log(e)})).finally((()=>{e.setButtonText("Save")}))})),T=new i(".popup-delete",(function(e){e.setButtonText("Deleting..."),B.deleteCard(y.getId()).then((()=>{y.deleteCard(),y=null,e.close()})).catch((e=>{console.log(e)})).finally((()=>{e.setButtonText("Yes")}))})),O=new class extends n{constructor(e){super(e),this._photo=this._popup.querySelector(".popup-photo__photo"),this._title=this._popup.querySelector(".popup-photo__title")}open(e,t){this._photo.src=e,this._title.textContent=t,this._photo.alt=t,super.open()}}(".popup-photo"),P=new i(".popup-edit-avatar",(function(e,t){e.setButtonText("Saving..."),B.updateAvatar(t["avatar-link"]).then((t=>{console.log("Avatar updated ",t),w.setUserInfo(t),e.close()})).catch((e=>{console.log(e)})).finally((()=>{e.setButtonText("Save")}))}));Array.from(document.querySelectorAll(g.formSelector)).forEach((t=>{const s=t.getAttribute("name"),o=new e(g,t);o.enableValidation(),E.set(s,o)})),b.addEventListener("click",(()=>{U.open(),E.get("add-form").resetValidation()})),f.addEventListener("click",(()=>{const e=w.getUserInfo();d.value=e.name,p.value=e.job,A.open(),E.get("edit-form").resetValidation()})),S.addEventListener("click",(()=>{P.open(),E.get("edit-avatar-form").resetValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFNN0YsY0FBYyxjQStDUHhGLE1BQU1DLEtBQUttRSxTQUFTbEUsaUJBQWlCNkgsRUFBQUEsZUFDN0MxSCxTQUFTd0wsSUFDaEIsTUFBTUMsRUFBV0QsRUFBWXZHLGFBQWEsUUFDcEN5RyxFQUFnQixJQUFJaE8sRUFBY2dLLEVBQTRCOEQsR0FDcEVFLEVBQWN2TCxtQkFDZHVILEVBQUFBLElBQW9CK0QsRUFBVUMsTUFpRGxDaEUsRUFBQUEsaUJBQXFDLFNBQVMsS0FDNUNxRCxFQUFTN0csT0FDVHdELEVBQUFBLElEN0t5QixZQzZLa0J4SCxxQkFLN0N3SCxFQUFBQSxpQkFBc0MsU0FBUyxLQUM3QyxNQUFNaUUsRUFBa0JsRSxFQUFTMkIsY0FDakMxQixFQUFBQSxNQUE0QmlFLEVBQWdCOUssS0FDNUM2RyxFQUFBQSxNQUFtQ2lFLEVBQWdCakIsSUFDbkRVLEVBQVVsSCxPQUNWd0QsRUFBQUEsSUR4TDBCLGFDd0xrQnhILHFCQUs5Q3dILEVBQUFBLGlCQUE0QyxTQUFTLEtBQ25ENkQsRUFBZ0JySCxPQUNoQndELEVBQUFBLElENUxnQyxvQkM0TGtCeEgscUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9wYWdlL2luZGV4LmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9BcGkuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBGb3JtVmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIGZvcm0pe1xuICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XG4gICAgdGhpcy5fZm9ybSA9IGZvcm07XG4gIH1cblxuICBfc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50LCBlcnJvck1lc3NhZ2UpIHtcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoYC4ke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgKTtcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9zZXR0aW5ncy5pbnB1dEVycm9yQ2xhc3MpO1xuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGVycm9yTWVzc2FnZTtcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9zZXR0aW5ncy5lcnJvckNsYXNzKTtcbiAgfTtcblxuICBfaGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KSB7XG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYCk7XG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fc2V0dGluZ3MuaW5wdXRFcnJvckNsYXNzKTtcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9zZXR0aW5ncy5lcnJvckNsYXNzKTtcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuICB9O1xuXG4gIF9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50KSB7XG4gICAgaWYgKCFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHtcbiAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCwgaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcbiAgICB9XG4gIH07XG5cbiAgX2hhc0ludmFsaWRJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5faW5wdXRMaXN0LnNvbWUoKGlucHV0RWxlbWVudCkgPT4ge1xuICAgICAgcmV0dXJuICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQ7XG4gICAgfSk7XG4gIH07XG5cbiAgX3RvZ2dsZUJ1dHRvblN0YXRlKCkge1xuICAgIGlmICh0aGlzLl9oYXNJbnZhbGlkSW5wdXQoKSkge1xuICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX3NldHRpbmdzLmluYWN0aXZlQnV0dG9uQ2xhc3MpO1xuICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX3NldHRpbmdzLmluYWN0aXZlQnV0dG9uQ2xhc3MpO1xuICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcbiAgICB9XG4gIH07XG5cbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX2lucHV0TGlzdCA9IEFycmF5LmZyb20odGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX3NldHRpbmdzLmlucHV0U2VsZWN0b3IpKTtcbiAgICB0aGlzLl9idXR0b25FbGVtZW50ID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKHRoaXMuX3NldHRpbmdzLnN1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcblxuICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XG5cbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcbiAgICAgICAgdGhpcy5fY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCk7XG4gICAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICByZXNldFZhbGlkYXRpb24oKXtcbiAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XG4gICAgfSk7XG4gIH1cblxuICBlbmFibGVWYWxpZGF0aW9uKCkge1xuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuICB9O1xufVxuXG5cbmV4cG9ydCB7Rm9ybVZhbGlkYXRvcn07XG4iLCJjbGFzcyBDYXJkIHtcblxuICAgIGNvbnN0cnVjdG9yKHsgX2lkLCBuYW1lLCBsaW5rLCBsaWtlcywgb3duZXIgfSwgY3VycmVudFVzZXJJZCwgY2FyZFNlbGVjdG9yLCBoYW5kbGVDYXJkQ2xpY2ssIGhhbmRsZURlbGV0ZUNhcmRDbGljaywgaGFuZGxlTGlrZUNsaWNrKSB7XG5cbiAgICAgICAgdGhpcy5faWQgPSBfaWQ7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRVc2VySWQgPSBjdXJyZW50VXNlcklkO1xuICAgICAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5faW1hZ2UgPSBsaW5rO1xuICAgICAgICB0aGlzLl9saWtlcyA9IGxpa2VzO1xuICAgICAgICB0aGlzLl9vd25lciA9IG93bmVyO1xuICAgICAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XG4gICAgICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljayA9IGhhbmRsZUNhcmRDbGljaztcbiAgICAgICAgdGhpcy5faGFuZGxlRGVsZXRlQ2FyZENsaWNrID0gaGFuZGxlRGVsZXRlQ2FyZENsaWNrO1xuICAgICAgICB0aGlzLl9oYW5kbGVMaWtlQ2xpY2sgPSBoYW5kbGVMaWtlQ2xpY2s7XG4gICAgfVxuXG4gICAgZ2V0SWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgfVxuXG4gICAgZ2V0TmFtZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICAgIH1cblxuICAgIGdldEltYWdlTGluaygpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbWFnZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIG9uZSBzaW5nbGUgcGhvdG8gY2FyZCB3aXRoIHNwZWNpZmllZCBjYXJkIGluZm9ybWF0aW9uIChvYmplY3QpXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNhcmRcbiAgICAgKiBAcmV0dXJucyBwaG90b0NhcmQgdG8gYmUgcmVuZGVyZWRcbiAgICAgKi9cbiAgICBjcmVhdGVDYXJkKCkge1xuICAgICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2NyZWF0ZU5ld1Bob3RvQ2FyZEVsZW1lbnQoKTtcbiAgICAgIHRoaXMuX2xpa2VDb3VudEVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGhvdG8tY2FyZF9fbGlrZS1jb3VudFwiKTtcbiAgICAgIHRoaXMuX2xpa2VCdXR0b24gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGhvdG8tY2FyZF9fbGlrZS1idXR0b25cIik7XG4gICAgICB0aGlzLl9kZWxldGVCdXR0b24gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGhvdG8tY2FyZF9fZGVsZXRlLWJ1dHRvblwiKTtcbiAgICAgIHRoaXMuX3Bob3RvID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnBob3RvLWNhcmRfX3Bob3RvXCIpO1xuICAgICAgdGhpcy51cGRhdGVMaWtlcyh0aGlzLl9saWtlcywgdGhpcy5fY3VycmVudFVzZXJJZCk7XG4gICAgICBpZih0aGlzLl9vd25lci5faWQgIT0gdGhpcy5fY3VycmVudFVzZXJJZCkge1xuICAgICAgICB0aGlzLl9kZWxldGVCdXR0b24ucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMuX2RlbGV0ZUJ1dHRvbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICAgIH1cblxuICAgIGRlbGV0ZUNhcmQoKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZSgpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgfVxuXG4gICAgdXBkYXRlTGlrZXMobGlrZXMsIHVzZXJJZCkge1xuICAgICAgdGhpcy5fbGlrZXMgPSBsaWtlcztcblxuICAgICAgdGhpcy5fbGlrZUNvdW50RWxlbWVudC50ZXh0Q29udGVudCA9IHRoaXMuX2xpa2VzLmxlbmd0aDtcblxuICAgICAgaWYoSlNPTi5zdHJpbmdpZnkodGhpcy5fbGlrZXMpLmluY2x1ZGVzKHVzZXJJZCkpIHtcbiAgICAgICAgdGhpcy5fbGlrZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdwaG90by1jYXJkX19saWtlLWJ1dHRvbl9hY3RpdmUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2xpa2VCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgncGhvdG8tY2FyZF9fbGlrZS1idXR0b25fYWN0aXZlJyk7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICBfYWRkRXZlbnRMaXN0ZW5lcnMoKXtcblxuICAgICAgICB0aGlzLl9hZGRMaWtlRXZlbnRMaXN0ZW5lcigpO1xuICAgICAgICB0aGlzLl9hZGRPcGVuUGhvdG9FdmVudExpc3RlbmVyKCk7XG4gICAgICAgIGlmKHRoaXMuX2RlbGV0ZUJ1dHRvbikge1xuICAgICAgICAgIHRoaXMuX2FkZERlbGV0ZUV2ZW50TGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9jcmVhdGVOZXdQaG90b0NhcmRFbGVtZW50KCkge1xuICAgICAgICBjb25zdCBwaG90b0NhcmQgPSB0aGlzLl9jYXJkU2VsZWN0b3IucXVlcnlTZWxlY3RvcihcIi5waG90by1jYXJkXCIpLmNsb25lTm9kZSh0cnVlKTtcblxuICAgICAgICBjb25zdCBwaG90byA9IHBob3RvQ2FyZC5xdWVyeVNlbGVjdG9yKFwiLnBob3RvLWNhcmRfX3Bob3RvXCIpO1xuICAgICAgICBjb25zdCBwaG90b1RpdGxlID0gcGhvdG9DYXJkLnF1ZXJ5U2VsZWN0b3IoXCIucGhvdG8tY2FyZF9fdGl0bGVcIik7XG4gICAgICAgIGNvbnN0IHBob3RvTGlrZXMgPSBwaG90b0NhcmQucXVlcnlTZWxlY3RvcihcIi5waG90by1jYXJkX19saWtlLWNvdW50XCIpO1xuXG4gICAgICAgIHBob3RvLnNyYyA9IHRoaXMuX2ltYWdlO1xuICAgICAgICBwaG90by5hbHQgPSB0aGlzLl9uYW1lO1xuICAgICAgICBwaG90b1RpdGxlLnRleHRDb250ZW50ID0gdGhpcy5fbmFtZTtcbiAgICAgICAgcGhvdG9MaWtlcy50ZXh0Q29udGVudCA9IHRoaXMuX2xpa2VzLmxlbmd0aDtcblxuICAgICAgICByZXR1cm4gcGhvdG9DYXJkO1xuICAgIH1cblxuICAgIC8qXG4gICAgS2VlcGluZyBjb21tZW50IGZvciBsZWFybmluZyBwdXJwb3Nlc1xuICAgIGRlY2xhcmUgbWV0aG9kcyBhcyBhcnJvdyBmdW5jdGlvbnMgdG8gbm90IGxvc2UgY29udGV4dCBgdGhpc2AuIGB0aGlzYCBpcyBDYXJkIGluc3RhbmNlIGhlcmVcbiAgICAqL1xuICAgIF9oYW5kbGVMaWtlRXZlbnQgPSAoKSA9PiB7XG4gICAgICBpZih0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygncGhvdG8tY2FyZF9fbGlrZS1idXR0b25fYWN0aXZlJykpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlTGlrZUNsaWNrKHRoaXMsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2hhbmRsZUxpa2VDbGljayh0aGlzLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfYWRkTGlrZUV2ZW50TGlzdGVuZXIoKSB7XG4gICAgICB0aGlzLl9saWtlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLl9oYW5kbGVMaWtlRXZlbnQpO1xuICAgIH1cblxuICAgIF9oYW5kbGVEZWxldGVFdmVudCA9ICgpID0+IHtcbiAgICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNhcmRDbGljayh0aGlzKTtcbiAgICB9XG5cbiAgICBfYWRkRGVsZXRlRXZlbnRMaXN0ZW5lcigpIHtcbiAgICAgICAgdGhpcy5fZGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLl9oYW5kbGVEZWxldGVFdmVudCk7XG4gICAgfVxuXG4gICAgX2FkZE9wZW5QaG90b0V2ZW50TGlzdGVuZXIoKSB7XG4gICAgICAgIHRoaXMuX3Bob3RvLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrKHRoaXMpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IHtDYXJkfVxuIiwiY2xhc3MgUG9wdXAge1xuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5fcG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xuICAgICAgICB0aGlzLl9jbG9zZUJ1dHRvbiA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fY2xvc2UtYnV0dG9uJyk7XG4gICAgICAgIHRoaXMuY2xvc2UgPSB0aGlzLmNsb3NlLmJpbmQodGhpcyk7IC8vQmV0dGVyIGJpbmQgdGhhbiBkZWZpbmluZyBjbG9zZSBhcyBhbiBhcnJvdyBmdW5jdGlvbiBJIGd1ZXNzP1xuICAgIH1cblxuICAgIG9wZW4oKSB7XG4gICAgICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5hZGQoXCJwb3B1cF9vcGVuZWRcIik7XG4gICAgICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LnJlbW92ZShcInBvcHVwX29wZW5lZFwiKTtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLl9oYW5kbGVDbGlja09uT3ZlcmxheUNsb3NlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcbiAgICAgIHRoaXMuX2Nsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmNsb3NlKTtcbiAgICB9XG5cbiAgICByZW1vdmVFdmVudExpc3RlbmVycygpIHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5faGFuZGxlQ2xpY2tPbk92ZXJsYXlDbG9zZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XG4gICAgICB0aGlzLl9jbG9zZUJ1dHRvbi5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2xvc2UpO1xuICAgIH1cblxuICAgIF9oYW5kbGVFc2NDbG9zZSA9IChldnQpID0+IHtcbiAgICAgICAgaWYoZXZ0LmtleSA9PSBcIkVzY2FwZVwiKXtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9oYW5kbGVDbGlja09uT3ZlcmxheUNsb3NlID0gKGV2dCkgPT4ge1xuICAgICAgICBpZihldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInBvcHVwXCIpKXtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfVxuICB9XG5cbn1cblxuZXhwb3J0IHtQb3B1cH07XG4iLCJpbXBvcnQgeyBQb3B1cCB9IGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XG4gICAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgaGFuZGxlU3VibWl0KSB7XG4gICAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcbiAgICAgIHRoaXMuX2hhbmRsZVN1Ym1pdCA9IGhhbmRsZVN1Ym1pdDtcbiAgICAgIHRoaXMuX2Zvcm0gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcuZm9ybScpO1xuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLmZvcm1fX3N1Ym1pdC1idXR0b24nKTtcbiAgICAgIHRoaXMuX2lucHV0cyA9IEFycmF5LmZyb20odGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvckFsbChcIi5mb3JtX190ZXh0LWlucHV0XCIpKTtcbiAgICB9XG5cbiAgICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XG4gICAgICAgIGNvbnN0IGlucHV0VmFsdWVzID0ge307XG5cbiAgICAgICAgdGhpcy5faW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBpbnB1dFZhbHVlc1tpbnB1dC5nZXRBdHRyaWJ1dGUoJ25hbWUnKV0gPSBpbnB1dC52YWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGlucHV0VmFsdWVzO1xuICAgIH1cblxuICAgIHNldEJ1dHRvblRleHQodGV4dD1cIlNhdmluZy4uLlwiKSB7XG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgIH1cblxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIHRoaXMuX2hhbmRsZVByb2ZpbGVGb3JtU3VibWl0KTtcbiAgICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICB0aGlzLl9mb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgdGhpcy5faGFuZGxlUHJvZmlsZUZvcm1TdWJtaXQpO1xuICAgICAgc3VwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5fZm9ybS5yZXNldCgpO1xuICAgICAgICBzdXBlci5jbG9zZSgpO1xuICAgIH1cblxuICAgIF9oYW5kbGVQcm9maWxlRm9ybVN1Ym1pdCA9IChldnQpID0+IHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5faGFuZGxlU3VibWl0KHRoaXMsIHRoaXMuX2dldElucHV0VmFsdWVzKCkpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgUG9wdXBXaXRoRm9ybSB9XG4iLCJjbGFzcyBTZWN0aW9uIHtcbiAgICBjb25zdHJ1Y3RvciggeyBpdGVtcywgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5faXRlbXMgPSBpdGVtcztcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJTZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiO1xuICAgIH1cblxuICAgIHJlbmRlcmVyKCkge1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG5cbiAgICAgICAgdGhpcy5faXRlbXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICB0aGlzLmFkZEl0ZW0oaXRlbSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFkZEl0ZW0oaXRlbSkge1xuICAgICAgICBjb25zdCBjYXJkID0gdGhpcy5fcmVuZGVyZXIoaXRlbSk7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGNhcmQpO1xuICAgIH1cbn1cblxuZXhwb3J0IHtTZWN0aW9ufVxuIiwiZXhwb3J0IGNvbnN0IHVzZXJTZWxlY3RvcnMgPSB7XG4gIG5hbWVTZWxlY3RvcjogXCIucHJvZmlsZV9fbmFtZVwiLFxuICBqb2JTZWxlY3RvcjogXCIucHJvZmlsZV9fZGVzY3JpcHRpb25cIixcbiAgYXZhdGFyU2VsZWN0b3I6IFwiLnByb2ZpbGVfX3Bob3RvXCJcbn07XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsVXNlckluZm8gPSB7XG4gIG5ld05hbWU6IFwiSmFjcXVlcyBDb3VzdGVhdVwiLFxuICBuZXdKb2I6IFwiRXhwbG9yZXJcIlxufTtcblxuLyoqIERlY2xhcmF0aW9uIG9mIHRoZSBQb3B1cHMgKi9cbmV4cG9ydCBjb25zdCBwb3B1cEVkaXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXAtZWRpdCcpO1xuZXhwb3J0IGNvbnN0IHBvcHVwQWRkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwLWFkZCcpO1xuZXhwb3J0IGNvbnN0IHBvcHVwUGhvdG8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXAtcGhvdG8nKTtcbmV4cG9ydCBjb25zdCBwb3B1cERlbGV0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cC1kZWxldGUnKVxuZXhwb3J0IGNvbnN0IHBvcHVwRWRpdEF2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cC1lZGl0LWF2YXRhcicpO1xuXG4vKiogRGVjbGFyYXRpb24gb2YgdGhlIENsb3NlIEJ1dHRvbnMgKi9cbmV4cG9ydCBjb25zdCBjbG9zZUJ1dHRvbkVkaXQgPSBwb3B1cEVkaXQucXVlcnlTZWxlY3RvcignLnBvcHVwX19jbG9zZS1idXR0b24nKTtcbmV4cG9ydCBjb25zdCBjbG9zZUJ1dHRvbkFkZCA9IHBvcHVwQWRkLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fY2xvc2UtYnV0dG9uJyk7XG5leHBvcnQgY29uc3QgY2xvc2VCdXR0b25QaG90byA9IHBvcHVwUGhvdG8ucXVlcnlTZWxlY3RvcignLnBvcHVwX19jbG9zZS1idXR0b24nKTtcbmV4cG9ydCBjb25zdCBjbG9zZUJ1dHRvbkRlbGV0ZSA9IHBvcHVwRGVsZXRlLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fY2xvc2UtYnV0dG9uJyk7XG5leHBvcnQgY29uc3QgY2xvc2VCdXR0b25FZGl0QXZhdGFyID0gcG9wdXBFZGl0QXZhdGFyLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fY2xvc2UtYnV0dG9uJyk7XG5cbi8qKiBEZWNsYXJhdGlvbiBvZiB0aGUgRm9ybXMgKi9cblxuZXhwb3J0IGNvbnN0IGZvcm1FZGl0TmFtZSA9ICdlZGl0LWZvcm0nO1xuZXhwb3J0IGNvbnN0IGZvcm1BZGROYW1lID0gJ2FkZC1mb3JtJztcbmV4cG9ydCBjb25zdCBmb3JtRGVsZXRlTmFtZSA9ICdkZWxldGUtZm9ybSc7XG5leHBvcnQgY29uc3QgZm9ybUVkaXRBdmF0YXJOYW1lID0gJ2VkaXQtYXZhdGFyLWZvcm0nO1xuXG5leHBvcnQgY29uc3QgZm9ybUVkaXQgPSBwb3B1cEVkaXQucXVlcnlTZWxlY3RvcignLmZvcm0nKTtcbmV4cG9ydCBjb25zdCBuYW1lSW5wdXQgPSBmb3JtRWRpdC5xdWVyeVNlbGVjdG9yKCcuZm9ybV9fdGV4dC1pbnB1dFtuYW1lPVwibmFtZVwiXScpO1xuZXhwb3J0IGNvbnN0IGRlc2NyaXB0aW9uSW5wdXQgPSBmb3JtRWRpdC5xdWVyeVNlbGVjdG9yKCcuZm9ybV9fdGV4dC1pbnB1dFtuYW1lPVwiYWJvdXQtbWVcIl0nKTtcblxuZXhwb3J0IGNvbnN0IGZvcm1BZGQgPSBwb3B1cEFkZC5xdWVyeVNlbGVjdG9yKCcuZm9ybScpO1xuZXhwb3J0IGNvbnN0IHRpdGxlSW5wdXQgPSBmb3JtQWRkLnF1ZXJ5U2VsZWN0b3IoJy5mb3JtX190ZXh0LWlucHV0W25hbWU9XCJ0aXRsZVwiXScpO1xuZXhwb3J0IGNvbnN0IGxpbmtJbnB1dCA9IGZvcm1BZGQucXVlcnlTZWxlY3RvcignLmZvcm1fX3RleHQtaW5wdXRbbmFtZT1cImltYWdlLWxpbmtcIl0nKTtcblxuZXhwb3J0IGNvbnN0IGZvcm1FZGl0QXZhdGFyID0gcG9wdXBFZGl0QXZhdGFyLnF1ZXJ5U2VsZWN0b3IoJy5mb3JtJyk7XG5leHBvcnQgY29uc3QgYXZhdGFyTGlua0lucHV0ID0gZm9ybUVkaXRBdmF0YXIucXVlcnlTZWxlY3RvcignLmZvcm1fX3RleHQtaW5wdXRbbmFtZT1cImF2YXRhci1saW5rXCJdJyk7XG5cbmV4cG9ydCBjb25zdCBwcm9maWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGUnKTtcbmV4cG9ydCBjb25zdCBlZGl0QnV0dG9uID0gcHJvZmlsZS5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2VkaXQtYnV0dG9uXCIpO1xuZXhwb3J0IGNvbnN0IGFkZEJ1dHRvbiA9IHByb2ZpbGUucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19hZGQtYnV0dG9uXCIpO1xuZXhwb3J0IGNvbnN0IGVkaXRBdmF0YXJCdXR0b24gPSBwcm9maWxlLnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fcGhvdG8tZWRpdC1idXR0b25cIik7XG5cbi8qKiBEZWNsYXJhdGlvbiBvZiB0aGUgUGhvdG9zICovXG5leHBvcnQgY29uc3QgcGhvdG9HcmlkU2VsZWN0b3IgPSBcIi5waG90b3NfX2dyaWRcIjtcbmV4cG9ydCBjb25zdCBwaG90b0NhcmRUZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGhvdG8tY2FyZF9fdGVtcGxhdGVcIikuY29udGVudDtcblxuZXhwb3J0IGNvbnN0IGZvcm1zID0gbmV3IE1hcCgpO1xuXG4vKiogRGVjbGFyYXRpb24gb2YgdGhlIFNldHRpbmcgb2JqZWN0IGZvciBjYXJkIHZhbGlkYXRpb24gKi9cbmV4cG9ydCBjb25zdCB2YWxpZGF0aW9uQ29uZmlnID0ge1xuICBmb3JtU2VsZWN0b3I6IFwiLmZvcm1cIixcbiAgaW5wdXRTZWxlY3RvcjogXCIuZm9ybV9fdGV4dC1pbnB1dFwiLFxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIuZm9ybV9fc3VibWl0LWJ1dHRvblwiLFxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcImZvcm1fX3N1Ym1pdC1idXR0b25fZGlzYWJsZWRcIixcbiAgaW5wdXRFcnJvckNsYXNzOiBcImZvcm1fX3RleHQtaW5wdXQtZXJyb3JfYWN0aXZlXCIsXG4gIGVycm9yQ2xhc3M6IFwiZm9ybV9faW5wdXQtZXJyb3JfdmlzaWJsZVwiXG59O1xuXG5cbiIsImltcG9ydCBcIi4vaW5kZXguY3NzXCI7XG5cbmltcG9ydCB7IEZvcm1WYWxpZGF0b3IgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzXCI7XG5pbXBvcnQgeyBDYXJkIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xuaW1wb3J0IHsgUG9wdXBXaXRoRm9ybSB9IGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcbmltcG9ydCB7IFBvcHVwV2l0aEltYWdlIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanNcIjtcbmltcG9ydCB7IFVzZXJJbmZvIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvVXNlckluZm8uanNcIlxuaW1wb3J0IHsgU2VjdGlvbiB9IGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcbmltcG9ydCB7IEFwaSB9IGZyb20gXCIuLi9jb21wb25lbnRzL0FwaS5qc1wiXG5pbXBvcnQgKiBhcyBjb25zdGFudHMgZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50c1wiO1xuXG5sZXQgY2FyZFRvRGVsZXRlO1xuXG4vKipcbiAqIEhhbmRsZXMgY2FyZCBjcmVhdGlvbiBvbiBTZWN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSB0aXRsZSBvZiB0aGUgY2FyZFxuICogQHBhcmFtIHtzdHJpbmd9IGxpbmsgLSBUaGUgbGluayBvZiB0aGUgcGhvdG9cbiAqL1xuZnVuY3Rpb24gcmVuZGVyQ2FyZChjYXJkKSB7XG4gIGNvbnN0IG5ld0NhcmQgPSBuZXcgQ2FyZChjYXJkLCB1c2VySW5mby5nZXRJZCgpLCBjb25zdGFudHMucGhvdG9DYXJkVGVtcGxhdGUsIGhhbmRsZUNhcmRDbGljaywgIGhhbmRsZUNhcmREZWxldGVDbGljaywgaGFuZGxlTGlrZUNsaWNrKTtcbiAgY29uc3QgcGhvdG9DYXJkID0gbmV3Q2FyZC5jcmVhdGVDYXJkKCk7XG4gIHJldHVybiBwaG90b0NhcmQ7XG59XG5cbi8qKlxuICogSGFuZGxlcyBuZXcgcGxhY2UgZm9ybSBzdWJtaXQgKFNlbnQgdG8gcG9wdXBXaXRoRm9ybSlcbiAqL1xuZnVuY3Rpb24gaGFuZGxlTmV3UGxhY2VGb3JtU3VibWl0KHBvcHVwLCBpbnB1dERhdGEpIHtcbiAgY29uc3QgY2FyZERhdGEgPSB7XG4gICAgY2FyZE5hbWU6IGlucHV0RGF0YVtcInRpdGxlXCJdLFxuICAgIGNhcmRMaW5rOiBpbnB1dERhdGFbXCJpbWFnZS1saW5rXCJdXG4gIH07XG4gIHBvcHVwLnNldEJ1dHRvblRleHQoXCJTYXZpbmcuLi5cIik7XG4gIGFwaS5zZXROZXdDYXJkKGNhcmREYXRhKVxuICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICBzZWN0aW9uLmFkZEl0ZW0ocmVzKTtcbiAgICAgIHBvcHVwLmNsb3NlKCk7XG4gICAgICB9KVxuICAgIC5jYXRjaCggZXJyID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgfSlcbiAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICBwb3B1cC5zZXRCdXR0b25UZXh0KFwiQ3JlYXRlXCIpO1xuICAgIH0pXG59XG5cbi8qKlxuICogSGFuZGxlcyBuZXcgcHJvZmlsZSBmb3JtIHN1Ym1pdCAoU2VudCB0byBwb3B1cFdpdGhGb3JtKVxuICovXG5mdW5jdGlvbiBoYW5kbGVQcm9maWxlRm9ybVN1Ym1pdChwb3B1cCwgaW5wdXREYXRhKSB7XG4gIHBvcHVwLnNldEJ1dHRvblRleHQoXCJTYXZpbmcuLi5cIik7XG4gIGFwaS5zZXRVc2VySW5mbyh7IG5ld05hbWU6IGlucHV0RGF0YVtcIm5hbWVcIl0sIG5ld0Fib3V0OiBpbnB1dERhdGFbXCJhYm91dC1tZVwiXSB9KVxuICAudGhlbiggcmVzID0+IHtcbiAgICB1c2VySW5mby5zZXRVc2VySW5mbyhyZXMpO1xuICAgIHBvcHVwLmNsb3NlKCk7XG4gIH0pXG4gIC5jYXRjaCggZXJyID0+IHtcbiAgICBjb25zb2xlLmxvZyhlcnIpO1xuICB9KVxuICAuZmluYWxseSgoKSA9PiB7XG4gICAgcG9wdXAuc2V0QnV0dG9uVGV4dChcIlNhdmVcIik7XG4gIH0pXG59XG5cbi8qKlxuICogRGVsZXRlcyB0aGUgc2VsZWN0ZWQgQ2FyZFxuICovXG5mdW5jdGlvbiBoYW5kbGVEZWxldGVGb3JtU3VibWl0KHBvcHVwKSB7XG4gIHBvcHVwLnNldEJ1dHRvblRleHQoXCJEZWxldGluZy4uLlwiKTtcbiAgYXBpLmRlbGV0ZUNhcmQoY2FyZFRvRGVsZXRlLmdldElkKCkpXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgY2FyZFRvRGVsZXRlLmRlbGV0ZUNhcmQoKTtcbiAgICAgIGNhcmRUb0RlbGV0ZT1udWxsO1xuICAgICAgcG9wdXAuY2xvc2UoKTtcbiAgICB9KVxuICAgIC5jYXRjaCggZXJyID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgfSlcbiAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICBwb3B1cC5zZXRCdXR0b25UZXh0KFwiWWVzXCIpO1xuICAgIH0pXG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgYXZhdGFyIHBob3RvXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZUVkaXRBdmF0YXJGb3JtU3VibWl0KHBvcHVwLCBpbnB1dERhdGEpIHtcbiAgcG9wdXAuc2V0QnV0dG9uVGV4dChcIlNhdmluZy4uLlwiKTtcbiAgYXBpLnVwZGF0ZUF2YXRhcihpbnB1dERhdGFbXCJhdmF0YXItbGlua1wiXSlcbiAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcIkF2YXRhciB1cGRhdGVkIFwiLHJlcyk7XG4gICAgICB1c2VySW5mby5zZXRVc2VySW5mbyhyZXMpO1xuICAgICAgcG9wdXAuY2xvc2UoKTtcbiAgICB9KVxuICAgIC5jYXRjaCggZXJyID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgfSlcbiAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICBwb3B1cC5zZXRCdXR0b25UZXh0KFwiU2F2ZVwiKTtcbiAgfSlcbn1cblxuLyoqXG4gKiBIYW5kbGVzIG9wZW4gcGhvdG8gb24gY2FyZCBjbGljayAoc2VudCB0byBwb3B1cFdpdGhDYXJkKVxuICovXG5mdW5jdGlvbiBoYW5kbGVDYXJkQ2xpY2soY2FyZCkge1xuICBwaG90b1BvcHVwLm9wZW4oY2FyZC5nZXRJbWFnZUxpbmsoKSwgY2FyZC5nZXROYW1lKCkpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVDYXJkRGVsZXRlQ2xpY2soY2FyZCkge1xuICBkZWxldGVQb3B1cC5vcGVuKCk7XG4gIGNhcmRUb0RlbGV0ZSA9IGNhcmQ7XG59XG5cbi8qKlxuICogQ2FsbHMgdGhlIEFQSSB0byBhZGQvcmVtb3ZlIGEgbGlrZSB0byB0aGUgbGlzdCBkZXBlbmRpbmcgb24gdGhlIGlzTGlrZWQgcGFyYW0uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzTGlrZWRcbiAqL1xuZnVuY3Rpb24gaGFuZGxlTGlrZUNsaWNrKGNhcmQsIGlzTGlrZWQpIHtcbiAgaWYoaXNMaWtlZCkge1xuICAgIGFwaS5hZGRMaWtlKGNhcmQuZ2V0SWQoKSlcbiAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJMaWtlIGFkZGVkIHN1Y2Nlc2Z1bGx5XCIsIHJlcy5saWtlcyk7XG4gICAgICAgIGNhcmQudXBkYXRlTGlrZXMocmVzLmxpa2VzLCB1c2VySW5mby5nZXRJZCgpKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goIGVyciA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICB9KVxuICB9IGVsc2Uge1xuICAgIGFwaS5yZW1vdmVMaWtlKGNhcmQuZ2V0SWQoKSlcbiAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJMaWtlIHJlbW92ZWQgc3VjY2VzZnVsbHlcIiwgcmVzLmxpa2VzKTtcbiAgICAgICAgY2FyZC51cGRhdGVMaWtlcyhyZXMubGlrZXMsIHVzZXJJbmZvLmdldElkKCkpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCggZXJyID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgIH0pXG4gIH1cbn1cblxuLyoqXG4gKiBFbmFibGVzIHZhbGlkYXRpb24gb24gYWxsIGZvcm1zLlxuICogU2F2ZXMgdGhlIGZvcm1WYWxpZGF0b3JzIG9uIGEgTWFwIGZvciBmdXR1cmUgYWNjZXNzXG4gKi9cbmZ1bmN0aW9uIGVuYWJsZUZvcm1WYWxpZGF0aW9uT25BbGxGb3JtcygpIHtcbiAgY29uc3QgZm9ybUxpc3QgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY29uc3RhbnRzLnZhbGlkYXRpb25Db25maWcuZm9ybVNlbGVjdG9yKSk7XG4gIGZvcm1MaXN0LmZvckVhY2goKGZvcm1FbGVtZW50KSA9PiB7XG4gICAgY29uc3QgZm9ybU5hbWUgPSBmb3JtRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpO1xuICAgIGNvbnN0IGZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihjb25zdGFudHMudmFsaWRhdGlvbkNvbmZpZywgZm9ybUVsZW1lbnQpO1xuICAgIGZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xuICAgIGNvbnN0YW50cy5mb3Jtcy5zZXQoZm9ybU5hbWUsIGZvcm1WYWxpZGF0b3IpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBTZXR0aW5nIHVwIHRoZSBBcGkgY2xhc3NcbiAqL1xuY29uc3QgYXBpID0gbmV3IEFwaSh7XG4gIGJhc2VVcmw6IFwiaHR0cHM6Ly9hcm91bmQubm9tb3JlcGFydGllcy5jby92MS9ncm91cC0xMlwiLFxuICBoZWFkZXJzOiB7XG4gICAgYXV0aG9yaXphdGlvbjogXCJiOWQxYzNiNi1jMGY0LTQyMjQtYWQ4Zi00YzgxZWZhM2Y4OWRcIixcbiAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICB9XG59KTtcblxuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8oY29uc3RhbnRzLnVzZXJTZWxlY3RvcnMpO1xubGV0IHNlY3Rpb247XG5cbi8qKiBVc2VyIGFuZCBjYXJkIGluZm9ybWF0aW9uIGxvYWRpbmcgKi9cblByb21pc2UuYWxsKFthcGkuZ2V0VXNlckluZm8oKSwgYXBpLmdldEluaXRpYWxDYXJkcygpXSlcbiAgLnRoZW4oKFt1c2VyRGF0YSwgY2FyZHNdKSA9PiB7XG4gICAgdXNlckluZm8uc2V0VXNlckluZm8odXNlckRhdGEpO1xuICAgIGNvbnNvbGUubG9nKHVzZXJEYXRhKTtcbiAgICBzZWN0aW9uID0gbmV3IFNlY3Rpb24oIHtcbiAgICAgIGl0ZW1zOiBjYXJkcyxcbiAgICAgIHJlbmRlcmVyOiByZW5kZXJDYXJkXG4gICAgfSxcbiAgICBjb25zdGFudHMucGhvdG9HcmlkU2VsZWN0b3IpO1xuICAgIHNlY3Rpb24ucmVuZGVyZXIoKTtcbiAgfSlcbiAgLmNhdGNoKCBlcnIgPT4ge1xuICAgIGNvbnNvbGUubG9nKGVycik7XG4gIH0pO1xuXG5cbi8qKiBQb3B1cCBsb2FkaW5nIGFuZCBldmVudCBsaXN0ZW5lciBzZXR1cCAqL1xuY29uc3QgYWRkUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybSgnLnBvcHVwLWFkZCcsIGhhbmRsZU5ld1BsYWNlRm9ybVN1Ym1pdCk7XG5jb25zdCBlZGl0UG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybSgnLnBvcHVwLWVkaXQnLCBoYW5kbGVQcm9maWxlRm9ybVN1Ym1pdCk7XG5jb25zdCBkZWxldGVQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKCcucG9wdXAtZGVsZXRlJywgaGFuZGxlRGVsZXRlRm9ybVN1Ym1pdCk7XG5jb25zdCBwaG90b1BvcHVwID0gbmV3IFBvcHVwV2l0aEltYWdlKCcucG9wdXAtcGhvdG8nKTtcbmNvbnN0IGVkaXRBdmF0YXJQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKCcucG9wdXAtZWRpdC1hdmF0YXInLCBoYW5kbGVFZGl0QXZhdGFyRm9ybVN1Ym1pdCk7XG5cbi8qKiBFbmFibGUgVmFsaWRhdGlvbiAqL1xuZW5hYmxlRm9ybVZhbGlkYXRpb25PbkFsbEZvcm1zKCk7XG5cblxuLyoqIERlY2xhcmF0aW9uIG9mIHRoZSBldmVudCBsaXN0ZW5lcnMgKi9cblxuLyoqIEFkZCBQb3B1cCBhbmQgRm9ybSAqL1xuY29uc3RhbnRzLmFkZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBhZGRQb3B1cC5vcGVuKCk7XG4gIGNvbnN0YW50cy5mb3Jtcy5nZXQoY29uc3RhbnRzLmZvcm1BZGROYW1lKS5yZXNldFZhbGlkYXRpb24oKTtcbn0pO1xuXG5cbi8qKiBFZGl0IFBvcHVwIGFuZCBGb3JtICovXG5jb25zdGFudHMuZWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBjb25zdCBjdXJyZW50VXNlckluZm8gPSB1c2VySW5mby5nZXRVc2VySW5mbygpO1xuICBjb25zdGFudHMubmFtZUlucHV0LnZhbHVlID0gY3VycmVudFVzZXJJbmZvLm5hbWU7XG4gIGNvbnN0YW50cy5kZXNjcmlwdGlvbklucHV0LnZhbHVlID0gY3VycmVudFVzZXJJbmZvLmpvYjtcbiAgZWRpdFBvcHVwLm9wZW4oKTtcbiAgY29uc3RhbnRzLmZvcm1zLmdldChjb25zdGFudHMuZm9ybUVkaXROYW1lKS5yZXNldFZhbGlkYXRpb24oKTtcbn0pO1xuXG5cbi8qKiBFZGl0IGF2YXRhciBwb3B1cCAqL1xuY29uc3RhbnRzLmVkaXRBdmF0YXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgZWRpdEF2YXRhclBvcHVwLm9wZW4oKTtcbiAgY29uc3RhbnRzLmZvcm1zLmdldChjb25zdGFudHMuZm9ybUVkaXRBdmF0YXJOYW1lKS5yZXNldFZhbGlkYXRpb24oKTtcbn0pO1xuXG5cblxuXG4iLCJjbGFzcyBBcGkge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuXG4gICAgZ2V0SW5pdGlhbENhcmRzKCkge1xuICAgICAgICByZXR1cm4gZmV0Y2godGhpcy5fb3B0aW9ucy5iYXNlVXJsK1wiL2NhcmRzL1wiLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9vcHRpb25zLmhlYWRlcnNcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpO1xuICAgIH1cblxuICAgIHNldE5ld0NhcmQoIHsgY2FyZE5hbWUsIGNhcmRMaW5rIH0pIHtcbiAgICAgIHJldHVybiBmZXRjaCh0aGlzLl9vcHRpb25zLmJhc2VVcmwrXCIvY2FyZHMvXCIsIHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgaGVhZGVyczogdGhpcy5fb3B0aW9ucy5oZWFkZXJzLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgbmFtZTogY2FyZE5hbWUsXG4gICAgICAgICAgbGluazogY2FyZExpbmtcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgICAudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcbiAgICB9XG5cbiAgICBhZGRMaWtlKGlkKSB7XG4gICAgICByZXR1cm4gZmV0Y2godGhpcy5fb3B0aW9ucy5iYXNlVXJsK1wiL2NhcmRzL2xpa2VzL1wiK2lkLCB7XG4gICAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgICAgaGVhZGVyczogdGhpcy5fb3B0aW9ucy5oZWFkZXJzXG4gICAgICB9KVxuICAgICAgLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlTGlrZShpZCkge1xuICAgICAgcmV0dXJuIGZldGNoKHRoaXMuX29wdGlvbnMuYmFzZVVybCtcIi9jYXJkcy9saWtlcy9cIitpZCwge1xuICAgICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX29wdGlvbnMuaGVhZGVyc1xuICAgICAgfSlcbiAgICAgIC50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpO1xuICAgIH1cblxuICAgIGRlbGV0ZUNhcmQoaWQpIHtcbiAgICAgIHJldHVybiBmZXRjaCh0aGlzLl9vcHRpb25zLmJhc2VVcmwrXCIvY2FyZHMvXCIraWQsIHtcbiAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgICBoZWFkZXJzOiB0aGlzLl9vcHRpb25zLmhlYWRlcnNcbiAgICAgIH0pXG4gICAgICAudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcbiAgICB9XG5cbiAgICBnZXRVc2VySW5mbygpIHtcbiAgICAgIHJldHVybiBmZXRjaCh0aGlzLl9vcHRpb25zLmJhc2VVcmwrXCIvdXNlcnMvbWVcIiwge1xuICAgICAgICBoZWFkZXJzOiB0aGlzLl9vcHRpb25zLmhlYWRlcnNcbiAgICAgIH0pXG4gICAgICAudGhlbih0aGlzLl9jaGVja1Jlc3BvbnNlKTtcbiAgICB9XG5cbiAgICBzZXRVc2VySW5mbyggeyBuZXdOYW1lLCBuZXdBYm91dCB9KSB7XG4gICAgICByZXR1cm4gZmV0Y2godGhpcy5fb3B0aW9ucy5iYXNlVXJsK1wiL3VzZXJzL21lXCIsIHtcbiAgICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX29wdGlvbnMuaGVhZGVycyxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIG5hbWU6IG5ld05hbWUsXG4gICAgICAgICAgYWJvdXQ6IG5ld0Fib3V0XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgICAgLnRoZW4odGhpcy5fY2hlY2tSZXNwb25zZSk7XG4gICAgfVxuXG4gICAgdXBkYXRlQXZhdGFyKGxpbmspIHtcbiAgICAgIHJldHVybiBmZXRjaCh0aGlzLl9vcHRpb25zLmJhc2VVcmwrXCIvdXNlcnMvbWUvYXZhdGFyXCIsIHtcbiAgICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX29wdGlvbnMuaGVhZGVycyxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIGF2YXRhcjogbGlua1xuICAgICAgICB9KVxuICAgICAgfSlcbiAgICAgIC50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpO1xuICAgIH1cblxuICAgIF9jaGVja1Jlc3BvbnNlKHJlcykge1xuICAgICAgaWYgKHJlcy5vaykge1xuICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcbiAgICAgIH1cbiAgICB9XG5cbn1cblxuZXhwb3J0IHsgQXBpIH07XG4iLCJjbGFzcyBVc2VySW5mbyB7XG4gICAgY29uc3RydWN0b3IoeyBuYW1lU2VsZWN0b3IsIGpvYlNlbGVjdG9yLCBhdmF0YXJTZWxlY3RvciB9KSB7XG4gICAgICAgIHRoaXMuX25hbWVTZWxlY3RvciA9IG5hbWVTZWxlY3RvcjtcbiAgICAgICAgdGhpcy5fam9iU2VsZWN0b3IgPSBqb2JTZWxlY3RvcjtcbiAgICAgICAgdGhpcy5fYXZhdGFyU2VsZWN0b3IgPSBhdmF0YXJTZWxlY3RvcjtcbiAgICAgICAgdGhpcy5fbmFtZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX25hbWVTZWxlY3Rvcik7XG4gICAgICAgIHRoaXMuX2pvYkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX2pvYlNlbGVjdG9yKTtcbiAgICAgICAgdGhpcy5fYXZhdGFyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fYXZhdGFyU2VsZWN0b3IpO1xuICAgIH1cblxuICAgIGdldElkKCkge1xuICAgICAgaWYodGhpcy5faWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZ2V0VXNlckluZm8oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLl9uYW1lRWxlbWVudC50ZXh0Q29udGVudCxcbiAgICAgICAgICAgIGpvYjogdGhpcy5fam9iRWxlbWVudC50ZXh0Q29udGVudCxcbiAgICAgICAgICAgIGF2YXRhcjogdGhpcy5fYXZhdGFyRWxlbWVudC5zcmNcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzZXRVc2VySW5mbyggeyBuYW1lLCBhYm91dCwgX2lkLCBhdmF0YXIgfSApIHtcbiAgICAgICAgdGhpcy5fbmFtZUVsZW1lbnQudGV4dENvbnRlbnQgPSBuYW1lO1xuICAgICAgICB0aGlzLl9qb2JFbGVtZW50LnRleHRDb250ZW50ID0gYWJvdXQ7XG4gICAgICAgIHRoaXMuX2F2YXRhckVsZW1lbnQuc3JjID0gYXZhdGFyO1xuICAgICAgICB0aGlzLl9pZCA9IF9pZDtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFVzZXJJbmZvIH07XG4iLCJpbXBvcnQgeyBQb3B1cCB9IGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcbiAgICAgICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XG4gICAgICAgIHRoaXMuX3Bob3RvID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwLXBob3RvX19waG90bycpO1xuICAgICAgICB0aGlzLl90aXRsZSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cC1waG90b19fdGl0bGUnKTtcbiAgICB9XG5cbiAgICBvcGVuKHBob3RvSW1hZ2UsIG5hbWUpIHtcbiAgICAgICAgdGhpcy5fcGhvdG8uc3JjID0gcGhvdG9JbWFnZTtcbiAgICAgICAgdGhpcy5fdGl0bGUudGV4dENvbnRlbnQgPSBuYW1lO1xuICAgICAgICB0aGlzLl9waG90by5hbHQgPSBuYW1lO1xuICAgICAgICBzdXBlci5vcGVuKCk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBQb3B1cFdpdGhJbWFnZSB9O1xuIl0sIm5hbWVzIjpbIkZvcm1WYWxpZGF0b3IiLCJjb25zdHJ1Y3RvciIsInNldHRpbmdzIiwiZm9ybSIsInRoaXMiLCJfc2V0dGluZ3MiLCJfZm9ybSIsIl9zaG93SW5wdXRFcnJvciIsImlucHV0RWxlbWVudCIsImVycm9yTWVzc2FnZSIsImVycm9yRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJpZCIsImNsYXNzTGlzdCIsImFkZCIsImlucHV0RXJyb3JDbGFzcyIsInRleHRDb250ZW50IiwiZXJyb3JDbGFzcyIsIl9oaWRlSW5wdXRFcnJvciIsInJlbW92ZSIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJ2YWxpZGl0eSIsInZhbGlkIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJfaGFzSW52YWxpZElucHV0IiwiX2lucHV0TGlzdCIsInNvbWUiLCJfdG9nZ2xlQnV0dG9uU3RhdGUiLCJfYnV0dG9uRWxlbWVudCIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5wdXRTZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiZm9yRWFjaCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZXNldFZhbGlkYXRpb24iLCJlbmFibGVWYWxpZGF0aW9uIiwiZXZ0IiwicHJldmVudERlZmF1bHQiLCJDYXJkIiwiY3VycmVudFVzZXJJZCIsImNhcmRTZWxlY3RvciIsImhhbmRsZUNhcmRDbGljayIsImhhbmRsZURlbGV0ZUNhcmRDbGljayIsImhhbmRsZUxpa2VDbGljayIsIl9pZCIsIm5hbWUiLCJsaW5rIiwibGlrZXMiLCJvd25lciIsIl9saWtlQnV0dG9uIiwiY29udGFpbnMiLCJfaGFuZGxlTGlrZUNsaWNrIiwiX2hhbmRsZURlbGV0ZUNhcmRDbGljayIsIl9jdXJyZW50VXNlcklkIiwiX25hbWUiLCJfaW1hZ2UiLCJfbGlrZXMiLCJfb3duZXIiLCJfY2FyZFNlbGVjdG9yIiwiX2hhbmRsZUNhcmRDbGljayIsImdldElkIiwiZ2V0TmFtZSIsImdldEltYWdlTGluayIsImNyZWF0ZUNhcmQiLCJfZWxlbWVudCIsIl9jcmVhdGVOZXdQaG90b0NhcmRFbGVtZW50IiwiX2xpa2VDb3VudEVsZW1lbnQiLCJfZGVsZXRlQnV0dG9uIiwiX3Bob3RvIiwidXBkYXRlTGlrZXMiLCJfYWRkRXZlbnRMaXN0ZW5lcnMiLCJkZWxldGVDYXJkIiwidXNlcklkIiwibGVuZ3RoIiwiSlNPTiIsInN0cmluZ2lmeSIsImluY2x1ZGVzIiwiX2FkZExpa2VFdmVudExpc3RlbmVyIiwiX2FkZE9wZW5QaG90b0V2ZW50TGlzdGVuZXIiLCJfYWRkRGVsZXRlRXZlbnRMaXN0ZW5lciIsInBob3RvQ2FyZCIsImNsb25lTm9kZSIsInBob3RvIiwicGhvdG9UaXRsZSIsInBob3RvTGlrZXMiLCJzcmMiLCJhbHQiLCJfaGFuZGxlTGlrZUV2ZW50IiwiX2hhbmRsZURlbGV0ZUV2ZW50IiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwia2V5IiwiY2xvc2UiLCJ0YXJnZXQiLCJfcG9wdXAiLCJkb2N1bWVudCIsIl9jbG9zZUJ1dHRvbiIsImJpbmQiLCJvcGVuIiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVycyIsIl9oYW5kbGVDbGlja09uT3ZlcmxheUNsb3NlIiwiX2hhbmRsZUVzY0Nsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIlBvcHVwV2l0aEZvcm0iLCJoYW5kbGVTdWJtaXQiLCJzdXBlciIsIl9oYW5kbGVTdWJtaXQiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJfc3VibWl0QnV0dG9uIiwiX2lucHV0cyIsImlucHV0VmFsdWVzIiwiaW5wdXQiLCJnZXRBdHRyaWJ1dGUiLCJ2YWx1ZSIsInNldEJ1dHRvblRleHQiLCJ0ZXh0IiwiX2hhbmRsZVByb2ZpbGVGb3JtU3VibWl0IiwicmVzZXQiLCJTZWN0aW9uIiwiY29udGFpbmVyU2VsZWN0b3IiLCJpdGVtcyIsInJlbmRlcmVyIiwiX2l0ZW1zIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsImNsZWFyIiwiaW5uZXJIVE1MIiwiaXRlbSIsImFkZEl0ZW0iLCJjYXJkIiwicHJlcGVuZCIsInBvcHVwRWRpdCIsInBvcHVwQWRkIiwicG9wdXBQaG90byIsInBvcHVwRGVsZXRlIiwicG9wdXBFZGl0QXZhdGFyIiwiZm9ybUVkaXQiLCJuYW1lSW5wdXQiLCJkZXNjcmlwdGlvbklucHV0IiwiZm9ybUFkZCIsInByb2ZpbGUiLCJlZGl0QnV0dG9uIiwiYWRkQnV0dG9uIiwiZWRpdEF2YXRhckJ1dHRvbiIsInBob3RvQ2FyZFRlbXBsYXRlIiwiY29udGVudCIsImZvcm1zIiwiTWFwIiwidmFsaWRhdGlvbkNvbmZpZyIsImZvcm1TZWxlY3RvciIsImNhcmRUb0RlbGV0ZSIsInJlbmRlckNhcmQiLCJ1c2VySW5mbyIsImNvbnN0YW50cyIsImhhbmRsZUNhcmREZWxldGVDbGljayIsInBob3RvUG9wdXAiLCJkZWxldGVQb3B1cCIsImlzTGlrZWQiLCJhcGkiLCJhZGRMaWtlIiwidGhlbiIsInJlcyIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsImVyciIsInJlbW92ZUxpa2UiLCJvcHRpb25zIiwiX29wdGlvbnMiLCJnZXRJbml0aWFsQ2FyZHMiLCJmZXRjaCIsImJhc2VVcmwiLCJoZWFkZXJzIiwiX2NoZWNrUmVzcG9uc2UiLCJzZXROZXdDYXJkIiwiY2FyZE5hbWUiLCJjYXJkTGluayIsIm1ldGhvZCIsImJvZHkiLCJnZXRVc2VySW5mbyIsInNldFVzZXJJbmZvIiwibmV3TmFtZSIsIm5ld0Fib3V0IiwiYWJvdXQiLCJ1cGRhdGVBdmF0YXIiLCJhdmF0YXIiLCJvayIsImpzb24iLCJQcm9taXNlIiwicmVqZWN0Iiwic3RhdHVzIiwiYXV0aG9yaXphdGlvbiIsIm5hbWVTZWxlY3RvciIsImpvYlNlbGVjdG9yIiwiYXZhdGFyU2VsZWN0b3IiLCJfbmFtZVNlbGVjdG9yIiwiX2pvYlNlbGVjdG9yIiwiX2F2YXRhclNlbGVjdG9yIiwiX25hbWVFbGVtZW50IiwiX2pvYkVsZW1lbnQiLCJfYXZhdGFyRWxlbWVudCIsImpvYiIsInNlY3Rpb24iLCJhbGwiLCJ1c2VyRGF0YSIsImNhcmRzIiwiYWRkUG9wdXAiLCJwb3B1cCIsImlucHV0RGF0YSIsImNhcmREYXRhIiwiZmluYWxseSIsImVkaXRQb3B1cCIsIl90aXRsZSIsInBob3RvSW1hZ2UiLCJlZGl0QXZhdGFyUG9wdXAiLCJmb3JtRWxlbWVudCIsImZvcm1OYW1lIiwiZm9ybVZhbGlkYXRvciIsImN1cnJlbnRVc2VySW5mbyJdLCJzb3VyY2VSb290IjoiIn0=